<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rails on Software engineering notes</title>
    <link>/categories/rails/</link>
    <description>Recent content in rails on Software engineering notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/categories/rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deploy on Heroku</title>
      <link>/posts/deploy-on-heroku/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/deploy-on-heroku/</guid>
      <description>介紹 Heroku 是雲端主機供應商，它有提供免費方案，提供 DB 及 mailgun etc.，如果只是一個小型不複雜的專案使用它還蠻合適的
如何 Deploy 到 Heroku 1) 安裝 Heroku 的 command 並登入 heroku login 2) 到你的 Repository 目錄裡 3) Push 你的 code 到 heroku Production 不能使用 sqlite3，詳細說明在這 Production 要用 PostgreSQL，最好是 Dev 及 Production 都用 PostgreSQL Production 一定要有 gem &#39;pg&#39; 否則即使 deploy 成功，頁面也會噴錯 Gemfile.lock 必須要有，不要在 .gitignore 加上它 這裡可以先做個小修改，讓 App 能順利 deploy 再說，Postgres 安裝再另外解決，Gemfile :
gem &#39;sqlite3&#39;, group: [:development, :test] gem &#39;pg&#39;, group: :production 如果 PostgreSQL 還沒安裝，在 bundle install 先略過它</description>
    </item>
    
    <item>
      <title>Payment Integration</title>
      <link>/posts/payments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/payments/</guid>
      <description>(最後更新 : 2016-04-28)
智付寶 介紹 智付寶有個很大的好處是提供測試環境，你可以直接去註冊，不用事先到主站註冊
這是它的測試環境註冊完後直接去開立商店，但期限只有 30 天（如果需要延長，直接寫信告知客服 cs@pay2go.com 就可以了）
接著到商店後台就會看到 API 串接金鑰了，到這裡先停，我們先做程式的部份，本篇以 Rails 實作，如果使用其他語言的朋友也沒關係，理解概念才是重點
實作導到智付寶的付款頁面 到智付寶文件專區選擇 MPG API 文件，裡面串接方法寫的很清楚，我們直接看 Code :
Controller :
# 智付寶文件規定的5個欄位必須按照字母順序 chain = &amp;quot;Amt=#{@order.total}&amp;amp;MerchantID=#{智付寶MerchantID}&amp;amp;MerchantOrderNo=#{@order.id}&amp;amp;TimeStamp=#{@order.created_at.to_i}&amp;amp;Version=#{智付寶Version}&amp;quot; # 頭先加上 HashKey，尾再加上 HashIV ，最後以 SHA-256 加密後再轉大寫 @check_value = Digest::SHA256.hexdigest(&amp;quot;HashKey=#{智付寶HashKey}&amp;amp;#{chain}&amp;amp;HashIV=#{智付寶HashIV}&amp;quot;).upcase 智付寶Merchant ID : 在支付寶後台的商店清單會顯示商店代號，不要點到你的商店裡，裡面沒有顯示 智付寶Version : 要看 API 文件的那個欄位，它會跟你說。i.e. 請帶 1.2。 智付寶HashKey : 後台的商店基本資料的API串接金鑰 智付寶HashIV : 後台的商店基本資料的API串接金鑰 HTML :
&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;https://capi.pay2go.com/MPG/mpg_gateway&amp;quot;&amp;gt; &amp;lt;!-- 此為測試的 url, 正式為 : https://api.pay2go.com/MPG/mpg_gateway --&amp;gt; &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;MerchantID&amp;quot; value=&amp;quot;&amp;lt;%= 智付寶MerchantID %&amp;gt;&amp;quot;/&amp;gt; &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;RespondType&amp;quot; value=&amp;quot;JSON&amp;quot;/&amp;gt; &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;CheckValue&amp;quot; value=&amp;quot;&amp;lt;%= @check_value %&amp;gt;&amp;quot;/&amp;gt; &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;TimeStamp&amp;quot; value=&amp;quot;&amp;lt;%= @order.</description>
    </item>
    
    <item>
      <title>Rails Basics</title>
      <link>/posts/ruby-on-rails-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-basics/</guid>
      <description>Rails 指令 rails new my_app : 新增 my_app 專案 rails s : 啟動 server rails s RAILS_ENV=development : 啟動 development 環境的 server rails s -b 0.0.0.0 : 開放外部, 預設只允許本機 (127.0.0.1:3000) rvmsudo rails s -p 80 : 使用 80 port, 使用 rvmsudo 是因為 rails 起 80 port 一定要用 sudo 身份 rails s -p 5000 : 換 port, 預設是 3000 rails c : rails console, 可以直接操作 ActiveRecord rails c --sandbox : 沙盒的 console, 在這期間改的 DB 內容在離開時都會還原 rails db : 進入 db console 根據 config/database.</description>
    </item>
    
    <item>
      <title>Rails devise / cancancan / rolify</title>
      <link>/posts/ruby-on-rails-user-permissions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-user-permissions/</guid>
      <description>Introduction devise : 提供註冊, 登入, 登出一整套 solution cancancan : 授權功能, 判斷 user 是否可以做什麼, 不可以做什麼 rolify : 身份功能, 賦與 user 身份 ex: 一般 user 或 admin 等等.. cancancan 設計上跟 model 綁太緊我覺得實作上會有些綁手綁腳，而 rolify 適合用在 role 分很多的情況下使用，如果希望專案引入的東西單純一點，我建議只需要 devise 就夠了
Devise 安裝 Gemfile :
gem &amp;lsquo;bcrypt&amp;rsquo; gem &amp;lsquo;devise&amp;rsquo;, &amp;lsquo;~&amp;gt; 3.5.6&amp;rsquo;
devise 預設使用 bcrypt 做加密 Init :
rails generate devise:install rails generate devise User rails generate devise:views rake db:migrate
補上 zh-TW 旳 rails-i18n 及 devise i18n :</description>
    </item>
    
    <item>
      <title>Rails Form</title>
      <link>/posts/ruby-on-rails-form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-form/</guid>
      <description>Introduction simple_form 讓表單寫起來更乾淨, 也支援 bootstrap 樣式, 推薦這套, 它也支援 devise bootstrap_form 也是讓表單更簡單, 但預設使用的是 bootstrap 樣式 Rails 原生表單 form # method 預設是 post &amp;lt;%= form_for @post, url: posts_path(@post) do |f| %&amp;gt; &amp;lt;%= f.label :title %&amp;gt; &amp;lt;%= f.text_field :title %&amp;gt; &amp;lt;%= f.label :content %&amp;gt; &amp;lt;%= f.text_field :content %&amp;gt; &amp;lt;%= f.button :submit, disable_with: &#39;Submiting&#39; %&amp;gt; &amp;lt;% end %&amp;gt; form_for 與 form_tag 差別 使用 form_for 的話一定要在 controller 的先 new 好 (@post = Post.new)
所以要 create 必須先 new 好</description>
    </item>
    
    <item>
      <title>Rails I18n</title>
      <link>/posts/ruby-on-rails-i18n/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-i18n/</guid>
      <description>Introduction 當網站會需要多國語言顯示的話, 就會用到 i18n
使用 UI 介面方便翻譯人員協助翻譯 tolk, open source, 蠻好用的, 較直覺 lit, open source localeapp, 線上服務 Phraseapp, 線上服務 原生基本用法 config/locales/en.yml :
en: posts: &#39;Posts&#39; config/locales/zh-TW.yml :
&#39;zh-TW&#39;: posts: &#39;文章&#39; controllers/welcome_controller.rb :
before_action :set_locale def set_locale if params[:locale] &amp;amp;&amp;amp; I18n.available_locales.include?(params[:locale].to_sym) session[:locale] = params[:locale] end I18n.locale = session[:locale] || I18n.default_locale @current_lang = session[:locale].nil? ? &#39;zh-TW&#39; : session[:locale] end view :
&amp;lt;%= link_to &amp;quot;繁體中文&amp;quot;, locale: &amp;quot;zh-TW&amp;quot; %&amp;gt; &amp;lt;%= link_to &amp;quot;English&amp;quot;, locale: &amp;quot;en&amp;quot; %&amp;gt; &amp;lt;p&amp;gt;&amp;lt;%= t(&#39;posts&#39;) %&amp;gt;&amp;lt;/p&amp;gt; 對應 DB 欄位 activerecord: attributes: user: real_name: &#39;真實姓名&#39; nickname: &#39;暱稱&#39; 當 validate 失敗後的 errors.</description>
    </item>
    
    <item>
      <title>Rails Installation And Deployment</title>
      <link>/posts/ruby-on-rails-installation-and-deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-installation-and-deployment/</guid>
      <description>Installation (最後更新: 2016-04-14)
[1] Update &amp;amp; Upgrade sudo apt-get update sudo apt-get upgrade -y [2] Install RVM (Ruby Version Manager) Install curl (MacOS doesn&amp;rsquo;t need to execute this)
sudo apt-get install curl Install RVM
\curl -sSL https://get.rvm.io | bash -s stable 讀取 rvm
source ~/.rvm/scripts/rvm 安裝 rvm 自己相依的東西
rvm requirements [3] Install Ruby rvm install ruby rvm use ruby --default [4] Install RubyGems rvm rubygems current [5] Install rails gem install rails 安裝 rails 的 doc 很久, 可以加上 -no-rdoc --no-ri 忽略 doc</description>
    </item>
    
    <item>
      <title>Rails Model</title>
      <link>/posts/ruby-on-rails-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-model/</guid>
      <description>Model 與 Table 的 Naming Conventions Model : 兩個單字以上不使用 _ 連接, 並且開頭字母大寫, ex: BookClub Table : 兩個單字以上使用 _ 連接, ex: book_clubs
Model / Class Model 檔名 Table / Schema -------------------------------------------------------- Article article.rb articles LineItem line_item.rb line_items Deer deer.rb deers Mouse mouse.rb mice Person person.rb people 外連鍵命名 : item_id, order_id
CRUD Read User.find(3) User.find(3, 4, 5) User.first User.first(5) # 取前5個 User.last User.all User.count User.limit(10) User.where(name: &amp;quot;ash&amp;quot;).order(status: desc).limit(10) # complex User.where(&#39;name LIKE ?</description>
    </item>
    
    <item>
      <title>Rails Seeds</title>
      <link>/posts/ruby-on-rails-seeds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-seeds/</guid>
      <description>Introduction fabrication, 產生物件 faker, 用來建立假資料 Fabrication 一個 model 對應一個 fabrication
首先先建立模型
Fabricator(:person) do age { rand(20..45) } end 一定要用 { } 包起來，因為有遇過一些奇怪的 bug, 而 seed 不成功
Insert 資料
Fabricate(:person) Fabricate(:person, email: &#39;xxx@ff.com&#39;) # 指定欄位 Faker 使用上非常簡單, 直接看 Example 建立 4 個 users, 並且每名 user 指定一個 role, 隨機 user 建立共 50 篇文章, 隨機 user 對隨機挑的 50 篇文章回覆共 200 筆留言
user = User.create({email: &amp;quot;user@gmail.com&amp;quot;, password: &amp;quot;00000000&amp;quot;, confirmed_at: Time.now}) Fabricator(:post) do title { Faker::Lorem.</description>
    </item>
    
    <item>
      <title>Rails Testing</title>
      <link>/posts/ruby-on-rails-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-testing/</guid>
      <description>Introduction Rspec-rails, 是一套 Rails 的 BDD Testing framework, 非常強大 Factory Girl, 產生測試資料 Capybara, 用來搭配 Rspec 的測試工具, 可以模擬使用者操作瀏覽器 (TODO) watchr (存檔馬上測) / rcov(測試涵蓋度) / shoulda (matcher) Gemfile
group :development, :test do gem &amp;quot;rspec&amp;quot; # 可以不需要，如果要用原來的 rspec 才需引入 gem &#39;rspec-rails&#39; # rspec 與 rails 整合的套件 gem &amp;quot;factory_girl_rails&amp;quot; end 安裝 rspec : rails generate rspec:install
Rspec 關於 BDD BDD 是基於 TDD 發展出來的，不同 TDD 的地方在於 BDD 寫出系統行為的規格，好處是可以盡量避免細節的遺漏、更容易理解及維護。
指令 執行所有測試 : rspec 只跑 controllers 的測試 : rspec spec/controllers .</description>
    </item>
    
    <item>
      <title>Rails Third-party Gems</title>
      <link>/posts/ruby-on-rails-third-party-gems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-third-party-gems/</guid>
      <description>will_paginate 提供分頁功能
will_paginate 如何使用 controller : posts/index
@posts = Post.includes(:user) 改成 @posts = Post.includes(:user).paginate(page: params[:page], per_page: 5) view : posts/index
&amp;lt;% @posts.each do |post| %&amp;gt; &amp;lt;%= post.title %&amp;gt; &amp;lt;% end %&amp;gt; &amp;lt;%= will_paginate @posts %&amp;gt; will_paginate not working 如果傳入的是 ActiveRecord_Associations_CollectionProxy 而不是 ActiveRecord_Relation 可能會造成此狀況，在 controller 要額外引入 require &#39;will_paginate/array&#39; bootstrap 樣式 view :
&amp;lt;%= will_paginate @posts, :renderer =&amp;gt; PaginationLinkRenderer %&amp;gt; config/initializers/pagination_link_renderer.rb :
require &#39;will_paginate/view_helpers/link_renderer&#39; require &#39;will_paginate/view_helpers/action_view&#39; class PaginationLinkRenderer &amp;lt; ::WillPaginate::ActionView::LinkRenderer protected def page_number(page) unless page == current_page tag(:li, link(page, page, :rel =&amp;gt; rel_value(page))) else tag(:li, link(page, &#39;#&#39;, :rel =&amp;gt; rel_value(page)), :class =&amp;gt; &amp;quot;active disabled&amp;quot;) end end def gap tag(:li, link(&#39;.</description>
    </item>
    
    <item>
      <title>Rails View</title>
      <link>/posts/ruby-on-rails-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-view/</guid>
      <description>(最後更新: 2016-04-27)
fields_for 一對一, 一對多 籍由 user 去更新 profile(1對1), user_languages(1對多) 欄位
user.rb
has_one :profile has_many :user_languages accepts_nested_attributes_for :profile accepts_nested_attributes_for :user_languages view
&amp;lt;%= form_for @user, url: user_path(@user), html: {method: :put} do |f| %&amp;gt; &amp;lt;%= f.fields_for :profile do |s| %&amp;gt; &amp;lt;%= s.text_field :about_me %&amp;gt; &amp;lt;% end %&amp;gt; &amp;lt;%= f.fields_for :user_languages do |l| %&amp;gt; &amp;lt;%= l.check_box :has_badge %&amp;gt; &amp;lt;%= l.object.from %&amp;gt; &amp;lt;%= l.object.to %&amp;gt; &amp;lt;% end %&amp;gt; &amp;lt;% end %&amp;gt; 產生的 HTML Name :</description>
    </item>
    
  </channel>
</rss>
