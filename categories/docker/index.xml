<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Software</title>
    <link>/categories/docker/</link>
    <description>Recent content in docker on Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Dec 2014 00:53:54 +0800</lastBuildDate><atom:link href="/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker</title>
      <link>/posts/docker/</link>
      <pubDate>Wed, 24 Dec 2014 00:53:54 +0800</pubDate>
      
      <guid>/posts/docker/</guid>
      <description>介紹 有點像 VM 但又不全然是 VM, 最主要它跟一般 VM 的差別在於 VM 所需的 OS 及 bins/libs 是安裝在 VM 本身裡面的
但 docker 的 container 概念會共用 OS 及 bins/libs, 但他們仍是獨立的, 由 Docker Engine 管理
最大好處可以快速啟動環境並且設定好, 很適合用在自動化測試或開發上
基本觀念 名詞解釋 image : 用來建立 container 的東西, 每一個 image 都只能讀且不能被改變 container : 是由一個 image 建立的一個的正在執行中的環境, 可以把它想成一台主機 官方 registry : 就是 Docker Hub Image 一個完整 image 的名稱是 : username/image_name:tag 一個 image 可以跑多個 container 可以 commit 這個 container 的變動製作新的 image image 想當於是 AWS EC2 的 AMI Container 把它想像 AWS EC2 的 Instances 清單 (相當於 docker ps -a) 每一個主機都是一個 container，有些是 stopped 有些是 running (相當於 docker ps, 只列出 running container) 只要被 Stop 的主機 (相當於 docker stop) 都是關機的狀態但還在列表上 (相當於還存在在 list 上 docker ps -a) 被 Stop 的主機你可以再對它執行 Start (相當於 docker start) 你可以對主機打成 image (相當於 docker commit) 而被 Terminate 的主機就會被刪除，你無法在 Instances 上看到 (相當於 docker rm 後你無法在 docker ps -a 上再看到它) 比較不一樣的是，執行中的 container 可以是直接進入(就像執行 ssh 到主機一樣)也可以是背景執行 停止 container 不只是關機這麼簡單，連修改過的資料都會不見 (但可使用 mount 外部的檔案或資料夾來解決) 安裝 mac 可從官網下載</description>
    </item>
    
  </channel>
</rss>
