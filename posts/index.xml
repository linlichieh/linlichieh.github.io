<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Software engineering notes</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Software engineering notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algorithms</title>
      <link>/posts/algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/algorithms/</guid>
      <description>Bubble sort How it works Compare two values and move the larger value to the right in each iteration. This way, the greatest value will end up on the right side in each iteration and will be locked and excluded from subsequent iterations.
animated demonstration: https://commons.wikimedia.org/wiki/File:Bubble-sort-example-300px.gif
Complexity Time O(n^2) bubble sort works by repeatedly swapping adjacent elements if they are in the wrong order, and it continues this process until the array is sorted.</description>
    </item>
    
    <item>
      <title>Apache</title>
      <link>/posts/apache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/apache/</guid>
      <description>基本設定 /etc/apache2/sites-available/test.conf :
&amp;lt;VirtualHost *:80&amp;gt; ServerName example.com ServerAdmin admin@example.com DocumentRoot /var/www/test &amp;lt;Directory /var/www/test&amp;gt; RewriteEngine on RewriteCond $1 !^(index\.php|static|crossdomain\.xml|robots\.txt|favicon\.ico) RewriteRule ^(.*)$ /index.php/$1 [L] Options Indexes FollowSymLinks MultiViews AllowOverride All Order allow,deny allow from all ExpiresActive On ExpiresByType image/jpg &amp;quot;access plus 10 years&amp;quot; ExpiresByType image/jpeg &amp;quot;access plus 10 years&amp;quot; &amp;lt;/Directory&amp;gt; ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined LogLevel warn &amp;lt;/VirtualHost&amp;gt; 啟動 conf
sudo a2ensite test Options All: 以下諸功能皆有 None: 以下諸功能皆無 Indexes: 自動產生目錄的索引, 將Indexes拿掉, 點選連結目錄就不會秀出目錄來, 會改成403 forbidden的訊息頁面, 如果網站下的 public 下有放 symbolic link 就要將此開啟, 才可以被 access Includes: 提供 SSI (Server-Side Inclues) 功能, 即使用Apache的指令在html檔中寫程式, 須先載入 includes_module FollowSymLinks: 遵循符號鏈接, 即能夠連到其它的目錄去執行, 會壓過 SymLinksIfOwnerMatch。 SymLinksIfOwnerMatch: 對符號鏈接及其每一層父資料夾, 都進行權限檢查, 當連結檔本身的owner跟連結目的地的owner不同時拒絕存取, 比 FollowSymLinks 更安全 ExecCGI: 可以執行CGI程式。 MultiViews: 送出多國語言支援的頁面.</description>
    </item>
    
    <item>
      <title>AWS</title>
      <link>/posts/aws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/aws/</guid>
      <description>(最後更新: 2016-04-27)
介紹 AWS (Amazon Web Services) 是針對主機或 App 提供整套 solution 的雲端服務
Install/Upgrade AWS CLI 安裝
sudo pip install --upgrade awscli 如果安裝出問題, 強制重新安裝可以解決
sudo pip install awscli --force-reinstall --upgrade Ubuntu (建議不要使用 apt-get 安裝, 版本很舊) 有些安裝完會有設定檔 /var/awslogs/etc/awslogs.conf Stop the agent
sudo service awslogs stop // Works on Ubuntu sudo service awslogsd stop // Amazon Linux 2 stop|restart|start
Region &amp;amp; AZ region 是 Data Center 的集合 AZ 與 AZ 至少隔70公里以上 AZ 與 AZ 是用光纖連接 AZ 裡有很多 DC 每個 DC 是 25Tbps 同一 region 我的帳號的 eu-west-1a 跟你的帳號的 eu-west-1a 不一定是同一個 AZ, 避免太多人選擇同一 AZ IAM 如果有很多開發者要共用一個 AWS 帳號, 這算是必用的服務 可以針對不同開發者給與不同權限 一般來說程式透過 Access key &amp;amp; Secret Key 調用 AWS API 是要寫在程式裡的, 但會遇到 Credentials embedded in code問題, 如果 push 到 public 的 github 就有資安風險, 也可以改成在 ec2 裡(環境)設定 secret key 較安全 (aws command) 角色可分 3 種 : user : 可以讓多個開發者共用同一個 AWS, 每個人可以有不同的登入帳密及權限 group : 可以設定權限, 再把要執行這些權限的 user 圈到這個 group 裡 role : 這是給 ec2 執行的權限, 開 ec2 時 IAM role 選這個, 而此 ec2 就有權限執行開放的服務 [操作] 增加一個登入帳號給團隊的成員 Users -&amp;gt; Create Users -&amp;gt; 輸入 user name -&amp;gt; copy Access Key ID 及 Secret Access Key (目前還不會用到) -&amp;gt; 回到 Users 列表就會看到剛剛新加的 user</description>
    </item>
    
    <item>
      <title>Backend</title>
      <link>/posts/backend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/backend/</guid>
      <description>安全性 SSL 憑證及加密傳送 (HTTPS) 資料再以 private key 做 AES CBC 方式加密 對某些重要的值使用 private key 以 sha1 產生 signature 參數做驗證 token &amp;amp; Access-Control-Allow-Origin (CSRF) htmlspecialchars (XSS) SQL injection 設計 RESTful API 注意地方 避免使用 cookie, 因違反無狀態協議, 如果只用來記錄 client 資料不維護狀態, 那麼還是可以使用
session 則完全違反 REST 的無狀態性
解決方式是 client 登入後產生 token, 再從 url 帶 token 過來 驗證身份方法1. 永遠使用 ssl, 就不用每次讓用戶對每次請求簽名
驗證身份方法2. server 將 token 加/解密對應到 session ID, application server 再用 session ID 取得用戶資料判斷權限
增加網站效能 server ELB (HA), auto-scaling nginx 取代 apache 後端 background job cache 靜態頁面 memcache / redis 前端 js/css minify &amp;amp; combine 圖片用另一個 domain 避免 browser 一次只能發幾個 request 的限制, 也避免帶到不必要的 cookie 一開始先載 lazy_image, 放真正圖片連結在 data-original= 最後再用 js 將 load 正確圖片 mysql 使用 in 代替 or slow query Mysql set index master - slave 關於 App 手機裡的 App 會有個 UUID，不同的 App UUID 也會不一樣，即使同 App App 重新安裝 UUID 會是新的，或者 UUID 好像也有過期時間 (e.</description>
    </item>
    
    <item>
      <title>Cryptography</title>
      <link>/posts/cryptography/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/cryptography/</guid>
      <description>Asymmetric cryptography (public-key cryptography) It contains a pair of Public key and Private key.
Public key
The public key is openly shared and accessible to anyone. It can be used by anyone to encrypt data intended for the recipient who holds the corresponding private key. The public key can also be used to verify digital signatures created by the corresponding private key holder. Private key
The private key is kept secret by its owner and should never be shared with anyone.</description>
    </item>
    
    <item>
      <title>Data Structures</title>
      <link>/posts/data-structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/data-structures/</guid>
      <description>Big O A mathematical notation used in computer science to describe the performance or complexity of an algorithm
Complexity O(1) &amp;lt; O(logn) &amp;lt; O(n) &amp;lt; O(nlogn) &amp;lt; O(n^2) &amp;lt; O(2^n) &amp;lt; O(n!)
O(1) constant O(logn) logarithmic base is 2 an array storing 1M items, will do 19 comparison with binary search binary search O(n) linear for loop an array storing 1 to 10, linear search O(nlogn) log linear merge sort, O(n^2) quadratic double for loop bubble, insertion, selection sort O(2^n) exponential recursive Fibonacci numbers O(n!</description>
    </item>
    
    <item>
      <title>Database</title>
      <link>/posts/database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/database/</guid>
      <description>Database scaling Vertical vs Horizontal Vertical: increase the capacity of a single server by adding more powerful hardware resources such as CPU, RAM, and storage
Pros Less complexity simpler to scale up by adding more resources to a single server no additional work to maintain data across machines like horizontal scaling does Data Consistency Cons Limited Growth There are physical limits to how much you can scale a single server. Once those limits are reached, you&amp;rsquo;ll need to look at horizontal scaling or other options.</description>
    </item>
    
    <item>
      <title>Database - Memcached</title>
      <link>/posts/database-memcached/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/database-memcached/</guid>
      <description>connect to memcached server $ telnet localhost 11211 Trying ::1... Trying 127.0.0.1... Connected to localhost. Escape character is &#39;^]&#39;. get key get flag123 set key 設 key &amp;ldquo;flag123&amp;rdquo; 值為 1
set flag123 0 86400 1 &amp;lt;= enter 1 &amp;lt;= enter STORED set flag123 0 86400 5 hello STORED set delete key delete flag123 DELETED ref : http://blog.elijaa.org/index.php?post/2010/05/21/Memcached-telnet-command-summary</description>
    </item>
    
    <item>
      <title>Database - MongoDB</title>
      <link>/posts/database-mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/database-mongodb/</guid>
      <description>Commands enter into console
mongo show databases
show dbs switch to specific db
use dev_db show collections (tables)
show collections show structure
db.room_inventories.find().pretty() There is no way to only view structure, must through a document. Choose one record from the list to view its structure. find does not retrieve all the data in a collection by default show index
db.room_plan_rates.getIndexes() query documents
db.room_plan_rates.find({ hotel_id: 192, plan_code: &#39;R1363HP19216916370545220559650-1&#39;, date: ISODate(&#39;2023-08-12&#39;) }).pretty() </description>
    </item>
    
    <item>
      <title>Database - MySQL</title>
      <link>/posts/database-mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/database-mysql/</guid>
      <description>(最後更新: 2016-04-14)
Install ubuntu :
sudo apt-get install mysql-server-5.6 mysql-client-5.6 mysql-client-core-5.6 mac :
brew install mysql mysql.server restart // client only brew install mysql --client-only mac : 開機自動啟動
mkdir -p ~/Library/LaunchAgents ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents 登入不用密碼 如果你連 mysql 都進不去，從步驟[1]開始，如果你可以進到 mysql console 從步驟[3]開始
[1] 停止 mysql deamon
sudo /etc/init.d/mysql stop [2] 加上 --skip-grant-tables option 啟動 mysql 指令
sudo /usr/sbin/mysqld --skip-grant-tables --skip-networking &amp;amp; [3] edit password
mysql -u root FLUSH PRIVILEGES; 修改密碼</description>
    </item>
    
    <item>
      <title>Database - MySQL Command and Syntax</title>
      <link>/posts/database-mysql-command-and-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/database-mysql-command-and-syntax/</guid>
      <description>登入 mysql (使用 -p 密碼登入) root@test:/# mysql -u webadmin -p root@test:/# mysql -u webadmin --password=00000000 db_name 連入遠端 mysql
mysql -h devHostName -u test -p mysql&amp;gt; #按ENTER是換第二行輸入， #不是送出而是繼續輸入， #如果不要再輸入了加上分號(;)表示結束 #quit 或 ctrl + d : 中斷 進入 local mysql server (in docker)
mysql -h localhost -P 3306 --protocol=tcp -u root Console 看目前連到 MySQL 的 process
SHOW PROCESSLIST; .. or ... SHOW FULL PROCESSLIST; +--------+----------+-------------------+-------+---------+------+----------+-----------------------+ | Id | User | Host | db | Command | Time | State | Info | +--------+----------+-------------------+-------+---------+------+----------+-----------------------+ | 530566 | api | 10.</description>
    </item>
    
    <item>
      <title>Database - MySQL Optimisation</title>
      <link>/posts/database-mysql-optimisation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/database-mysql-optimisation/</guid>
      <description>Index How does index work? MySQL uses a data structure (B-Tree is default) that stores the value of the indexed column(s) and a reference to the row that contains the rest of the data. This allows mysql to find the values without scanning the whole table.
B-Tree is the most commonly used B-Tree is used for both clustered and non-clustered indexes If it&amp;rsquo;s a multi-column index, the value will be concatenated values of the indexed columns types of index</description>
    </item>
    
    <item>
      <title>Database - MySQL phpmyadmin</title>
      <link>/posts/database-phpmyadmin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/database-phpmyadmin/</guid>
      <description>安裝 phpmyadmin sudo apt-get install phpmyadmin 啟動 phpmyadmin Apache /etc/apache2/apache2.conf 加入 :
Include /etc/phpmyadmin/apache.conf sudo service apache2 restart nginx 將 phpmyadmin 的 code 放到 /var/www 下
ln -s /usr/share/phpmyadmin /var/www/phpmyadmin 建立 /etc/nginx/sites-available/phpmyadmin :
server { listen 80; root /var/www/phpmyadmin; index index.php index.html index.htm index.nginx-debian.html; server_name db.ivy-way.com; location / { try_files $uri $uri/ =404; } location ~ \.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/var/run/php5-fpm.sock; } } 建立 phpmyadmin 的 site config
ln -s /etc/nginx/sites-available/phpmyadmin /etc/nginx/sites-enabled/phpmyadmin 如果沒有設定密碼會連不進去 修改 /etc/phpmyadmin/config.</description>
    </item>
    
    <item>
      <title>Database - PostgreSQL</title>
      <link>/posts/database-postgresql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/database-postgresql/</guid>
      <description>(最後更新 : 2016-05-01)
介紹 和 MySQL 一樣都是關聯型資料庫，一樣使用 SQL 來執行 query
正確念法為 post-gress-Q-L 或簡稱 postgres
安裝 安裝 Postgres Ubuntu : todo&amp;hellip;
Mac :
brew install postgres 初始化 Database 安裝完要始初化一個 Database, 而它的 owner 就是執行這指令的 User
initdb /usr/local/var/postgres -E utf8 Database 已存在 initdb: directory &amp;quot;/usr/local/var/postgres&amp;quot; exists but is not empty If you want to create a new database system, either remove or empty the directory &amp;quot;/usr/local/var/postgres&amp;quot; or run initdb with an argument other than &amp;quot;/usr/local/var/postgres&amp;quot;.</description>
    </item>
    
    <item>
      <title>Database - Redis</title>
      <link>/posts/database-redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/database-redis/</guid>
      <description>介紹 Open source Key-Value 儲存型態 Value 可以是 strings, hashes, lists, sets, ordered sets 運作在 memory, 可用 snapshot 儲存在硬碟 不支援 2 層以上的 hash Install server
brew install redis // Mac sudo apt-get install redis-server // Ubuntu Mac 需執行 redis-server 指令才會啟動
client : 只需安裝 redis-tools
sudo apt-get install redis-tools Command keys 全部的 key
keys * Key 的數量
info keyspace &amp;gt; db0:keys=74415,expires=63940,avg_ttl=306997004 Find prefix string key : &amp;lsquo;queue:&amp;rsquo;
keys queue:* 刪除 prefix key</description>
    </item>
    
    <item>
      <title>Deploy on Heroku</title>
      <link>/posts/deploy-on-heroku/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/deploy-on-heroku/</guid>
      <description>介紹 Heroku 是雲端主機供應商，它有提供免費方案，提供 DB 及 mailgun etc.，如果只是一個小型不複雜的專案使用它還蠻合適的
如何 Deploy 到 Heroku 1) 安裝 Heroku 的 command 並登入 heroku login 2) 到你的 Repository 目錄裡 3) Push 你的 code 到 heroku Production 不能使用 sqlite3，詳細說明在這 Production 要用 PostgreSQL，最好是 Dev 及 Production 都用 PostgreSQL Production 一定要有 gem &#39;pg&#39; 否則即使 deploy 成功，頁面也會噴錯 Gemfile.lock 必須要有，不要在 .gitignore 加上它 這裡可以先做個小修改，讓 App 能順利 deploy 再說，Postgres 安裝再另外解決，Gemfile :
gem &#39;sqlite3&#39;, group: [:development, :test] gem &#39;pg&#39;, group: :production 如果 PostgreSQL 還沒安裝，在 bundle install 先略過它</description>
    </item>
    
    <item>
      <title>Design Patterns</title>
      <link>/posts/design-patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/design-patterns/</guid>
      <description>SOLID Principles Single Responsibility Principle Each class should have only one responsibility or reason to change. narrow down the behaviour a class can have Open-Closed Principle Software entities should be open for extension but closed for modification. to add new functionality to a class without changing the existing code by extending a class and adding new functions into subclass Liskov Substitution Principle Objects of a superclass should be replaceable with objects of a subclass without affecting the correctness of the program.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>/posts/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/docker/</guid>
      <description>介紹 有點像 VM 但又不全然是 VM, 最主要它跟一般 VM 的差別在於 VM 所需的 OS 及 bins/libs 是安裝在 VM 本身裡面的
但 docker 的 container 概念會共用 OS 及 bins/libs, 但他們仍是獨立的, 由 Docker Engine 管理
最大好處可以快速啟動環境並且設定好, 很適合用在自動化測試或開發上
基本觀念 名詞解釋 image : 用來建立 container 的東西, 每一個 image 都只能讀且不能被改變 container : 是由一個 image 建立的一個的正在執行中的環境, 可以把它想成一台主機 官方 registry : 就是 Docker Hub Image 一個完整 image 的名稱是 : username/image_name:tag 一個 image 可以跑多個 container 可以 commit 這個 container 的變動製作新的 image image 想當於是 AWS EC2 的 AMI Container 把它想像 AWS EC2 的 Instances 清單 (相當於 docker ps -a) 每一個主機都是一個 container，有些是 stopped 有些是 running (相當於 docker ps, 只列出 running container) 只要被 Stop 的主機 (相當於 docker stop) 都是關機的狀態但還在列表上 (相當於還存在在 list 上 docker ps -a) 被 Stop 的主機你可以再對它執行 Start (相當於 docker start) 你可以對主機打成 image (相當於 docker commit) 而被 Terminate 的主機就會被刪除，你無法在 Instances 上看到 (相當於 docker rm 後你無法在 docker ps -a 上再看到它) 比較不一樣的是，執行中的 container 可以是直接進入(就像執行 ssh 到主機一樣)也可以是背景執行 停止 container 不只是關機這麼簡單，連修改過的資料都會不見 (但可使用 mount 外部的檔案或資料夾來解決) Quick start based on particular scenarios ngrok: forward port 8080 from inside the Docker container to your local machine docker run --rm -it -p 4040:4040 ngrok/ngrok http host.</description>
    </item>
    
    <item>
      <title>Docker Kubernetes</title>
      <link>/posts/docker-kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/docker-kubernetes/</guid>
      <description>Features CI/CD containerized infrastructure Auto-scalable infrastructure Environment consistency across dev/testing/prod Loosely coupled infrastructure Main components Master components (control plane) etcd stores the configuration information that can be used by each node is accessible only by API server kubernetes backing store API Server exposes kubernetes API provides all the operation on cluster via API entrypoint to k8s cluster Controller Manager regulates the state of cluster and performs a task runs in nonterminating loop and is responsible for collecting and sending info to API server keeps track of what&amp;rsquo;s happening in the cluster handles multiple nodes Scheduler distributes the workload tracks utilization of working load on cluster nodes places the workload on which resources are available and accept the workload allocates pods to available nodes ensures pods placement Node (multiple) components Docker runs the encapsulated application containers Kubelet Service (kubelet) relays information to and from control plane service interacts with etcd store to read configuration details and write values communicates with the master component to receive commands and work maintains the state of work and the node server manages network rules, port forwarding, etc.</description>
    </item>
    
    <item>
      <title>Encoding Schemes</title>
      <link>/posts/encoding-schemes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/encoding-schemes/</guid>
      <description>Common encoding schemes ASCII (American Standard Code for Information Interchange) a character encoding standard used to represent text in computers and other devices that use text UTF-8 the dominant character encoding for the web, used to represent a wide array of characters from various languages a variable-width encoding able to encode all 1,112,064 valid character code points in Unicode using one to four 8-bit bytes UTF-16 Like UTF-8, this is a variable-width encoding, but it uses 16-bit units It&amp;rsquo;s used predominantly for native encoding in Microsoft products ISO-8859-1 Also known as Latin-1, it is a single-byte encoding that can represent the first 256 Unicode characters.</description>
    </item>
    
    <item>
      <title>Frontend Basics HTML / CSS / JS</title>
      <link>/posts/frontend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/frontend/</guid>
      <description>How Javascript works (This example is from udemy)
There are 4 pillars.
JS
Memory Heap Call stack browser
Web APIs (DOM document, AJAX XMLHttpRequest, Timeout setTimeout) Event loop (check) -&amp;gt; callback queue (onClick, onLoad, onDone) example code:
console.log(&#39;1); setTimeout(() =&amp;gt; { console.log(&#39;2&#39;); }, 2000) console.log(3); result:
1 3 undefined 2 The steps:
console.log(&#39;1&#39;) goes to CALL STACK and gets run setTimeout() goes to CALL STACK and gets run setTimeout() isn&amp;rsquo;t part of Js and pops out of CALL STACK then goes to WEB API WEB API starts a timer with 2 seconds console.</description>
    </item>
    
    <item>
      <title>FTP server</title>
      <link>/posts/ftp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ftp/</guid>
      <description>使用 vsftpd 安裝 sudo apt-get update sudo apt-get install vsftpd 設定 /etc/vsftpd.conf write_enable=YES local_umask=022 chroot_local_user=YES allow_writeable_chroot=YES 開放 root 帳號登入 /etc/ftpusers : 把 root 註解
啟動 sudo service vsftpd restart 記得開放 21 port 現在 user 都可以登入到自己家目錄了
指令 連線
ftp example.com sftp example.com 操作
ls 查看 Server 端的目錄或檔案 pwd 查看 Server 端目前所在的目錄 cd 變更 Server 端目前的目錄 cdup 變更 Server 端目前的目錄到上一目錄 lls 查看 Local 端的目錄或檔案 lcd 變更 Local 端目前的目錄 asc 設定傳輸模式為文字檔方式 bin 設定傳輸模式為二進位檔方式 get 將 Server 端的檔案拷貝至 Local 端現在目錄下 mget 拷貝多個 Server 端的檔案至 Local 端現在目錄下 put 將 Local 端的檔案拷貝至 Server 端現在目錄下 mput 拷貝多個 Local 端的檔案至 Server 端現在目錄下 delete 刪除 Server 端的檔案 mkdir 在 Server 端建立目錄 rmdir 刪除 Server 端的目錄 !</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>/posts/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/git/</guid>
      <description>add Add a new file or folder
git add example.txt Add all untracked files and folders
git add . branch 都不加 : 顯示 local branch -r : 顯示 remote branch -a : 顯示所有 branch (local + remote) -v : 顯示branch的詳細資料 --merged : 列出已經merge的branch --no-merged : 列出尚未merge的branch Rename branch
git branch -m {old_name} {new_name} Rename current branch
git branch -m {new_name} 刪除branch
git branch -d developXD git branch -D {branch name} git branch —no-merged</description>
    </item>
    
    <item>
      <title>Go AWS</title>
      <link>/posts/go-aws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/go-aws/</guid>
      <description>如何使用 AWS API 在使用它的任何一個 service 前要先準備好 credential 然候再建立 session，然候再跟 AWS services 互動，
Session 可以讓全部 AWS services 共用 (在使用各服務前會需要用 session 建立) ，最好 cache 起來，
每次要用之前再從 cache 拿出來， 避免每一次重新建立連線耗費資源。
[1] 初始化 credential 可以使用 aws-cli 指令 aws configure 幫你產生或手動建立檔案
~/.aws/config
[這裡填 profile name] region = us-west-2 output = json ~/.aws/credentials
[這裡填 profile name] aws_access_key_id = A******************A aws_secret_access_key = 9**************************************V 常用的 credential 有幾種，以下會按照順序，哪個可以取到就使用
func GetAWSCredentialChain() (*credentials.Credentials, *aws.Config) { config := aws.NewConfig() var ProviderList []credentials.Provider = []credentials.</description>
    </item>
    
    <item>
      <title>Go Basics</title>
      <link>/posts/go-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/go-basics/</guid>
      <description>Declare var t *T = new(T) // t := new(T) var a uint64 = 22 // a := uint64(22) a := 0x12 // 18 Multiple variables
ff, xx := 3, &amp;quot;cc&amp;quot; []interface{}
hMap := make(map[string]interface{}) hMap[&amp;quot;ID&amp;quot;] = &amp;quot;06&amp;quot; hMap[&amp;quot;Info&amp;quot;] = map[string]string{ &amp;quot;Name&amp;quot;: &amp;quot;Jack&amp;quot; } resque2 := map[string]interface{}{ &amp;quot;class&amp;quot;: &amp;quot;hnap&amp;quot;, &amp;quot;args&amp;quot;: []interface{}{hMap}, } map[string]interface{}
x := map[string]interface{}{ &amp;quot;foo&amp;quot;: []string{&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;}, &amp;quot;bar&amp;quot;: &amp;quot;foo&amp;quot;, &amp;quot;baz&amp;quot;: 10.4, } map[string]interface{}
t := map[string]interface{}{} t[&amp;quot;id&amp;quot;] = 312 t[&amp;quot;type&amp;quot;] = &amp;quot;realtime&amp;quot; t[&amp;quot;data&amp;quot;] = []map[string]string{ { &amp;quot;did&amp;quot;: &amp;quot;did1&amp;quot;, &amp;quot;action&amp;quot;: &amp;quot;action1&amp;quot;, }, { &amp;quot;did&amp;quot;: &amp;quot;did2&amp;quot;, &amp;quot;action&amp;quot;: &amp;quot;action2&amp;quot;, }, } 但不可以, 無法這樣給值 var t map[string]interface{} t[&amp;quot;xxx&amp;quot;] = &amp;quot;xxx&amp;quot; map[string]map[string]string</description>
    </item>
    
    <item>
      <title>Go Built-in Packages</title>
      <link>/posts/go-built-in-packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/go-built-in-packages/</guid>
      <description>fmt 輸出固定長度 fmt.Printf(&amp;quot;ID : %-10s&amp;quot;, id) // 十個字元的長度, 向左對齊 fmt.Printf(&amp;quot;ID : %10s&amp;quot;, id) // 十個字元的長度, 向右對齊 fmt.Printf(&amp;quot;ID : %.10s&amp;quot;, id) // 印出頭十個字元 fmt.Printf(&amp;quot;%q&amp;quot;, []string{&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;}) // 印 slice `[&amp;quot;a&amp;quot; &amp;quot;b&amp;quot;]` 前面補 0 fmt.Sprintf(&amp;quot;%02d:%02d&amp;quot;, 5, 3) // 05:03 接收 command 輸入的值 fmt.Print(&amp;quot;Enter a number: &amp;quot;) var input float64 fmt.Scanf(&amp;quot;%f&amp;quot;, &amp;amp;input) 印出顏色 fmt.Println(&amp;quot;\x1b[31;1mHello, World!\x1b[0m&amp;quot;) 最簡單的方法, 不過有個缺點是它會是 string fmt.Sprintf(&amp;quot;%.7f&amp;quot;, 123.123456789) // 123.1234568 不改變本身的型態 val := 123.123456789 pow10_n := math.Pow10(7) // 1e7 = 10000000 d := math.</description>
    </item>
    
    <item>
      <title>Go Frameworks</title>
      <link>/posts/go-frameworks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/go-frameworks/</guid>
      <description>Beego 上手資源 官網文件 作者中文影片教學 安裝 按照官網指令即可
Routers 基本語法
beego.Router(&amp;quot;/api/:id&amp;quot;, &amp;amp;controllers.RController{}) beego.Router(&amp;quot;/api/list&amp;quot;, &amp;amp;RestController{}, &amp;quot;*:ListFood&amp;quot;) # * = ANY, 可替換為 post / put beego.Router(&amp;quot;/api/list&amp;quot;, &amp;amp;RestController{}, &amp;quot;get,post:ApiFunc&amp;quot;) # 指定兩個 Http method 到同一個 func beego.Router(&amp;quot;/api/list&amp;quot;, &amp;amp;RestController{}, &amp;quot;get:GetFunc;post:PostFunc&amp;quot;) # 指定到不同 Http method 即不同的 Func beego.AutoRouter(&amp;quot;&amp;amp;controllers.ObjectController{}) # 自動 Match /object/blog/2013/09/12 -&amp;gt; ObjectController 的 blog 方法，參數: map[0: 2013 1:09 2:12] Match /api:id : Match /api/123 (即使沒有 :id, :id 相當於 .* 任意字元) /api/:id! : Match /api/123 (:id 一定要有值) /api/:id([0-9]+) = api/:id:int : 指定要配對的字元 /news/:all : Match /news/path/to/123.</description>
    </item>
    
    <item>
      <title>Go GUI</title>
      <link>/posts/go-gui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/go-gui/</guid>
      <description>QT, OpenGL Qt is an application framework, where you can build (almost) everything within Qt.
OpenGL is a graphic library. The difference between library and framework is simple: Library is used for one specific thing, i.e. drawing, or doing data stuff, framework on the other hand is a set of libraries.
ref: https://www.quora.com/What-are-the-difference-between-QT-OpenGL-Unity
therecipe/qt Install on mac 按照它建議 mac 安裝的順序, 其中 qt 我是下載 without Android or iOS support 這個版本
如果都安裝成功後跑 basic example 就可以看到 GUI 介面了</description>
    </item>
    
    <item>
      <title>Go Installation</title>
      <link>/posts/go-installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/go-installation/</guid>
      <description>Linux ／ Mac (最後更新: 2016-03-28)
[1] download golang source Linux : https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz
Mac : https://storage.googleapis.com/golang/go1.6.darwin-amd64.tar.gz
[2] Install Linux : sudo tar -C /usr/local -xzf go1.6.darwin-amd64.tar.gz
Mac : sudo tar -C /usr/local -xzf go1.6.darwin-amd64.tar.gz
如果要重安裝直接 remove /usr/local/go 再執行上面指令就可以了
[3] Create essential folders 在家目錄下建立 go, 將外部套件與原始程式分離
.bashrc(linux) / .bash_profile(mac) :
export GOPATH=/Users/lij/go export GOROOT=/usr/local/go export PATH=$PATH:$GOROOT/bin:$GOPATH/bin Linux exec : source ~/.bashrc
Mac exec : source ~/.bash_profile
解壓縮完且 .bashrc 設定好以上就算安裝完成了, 可用 go version 測試是否安裝成功</description>
    </item>
    
    <item>
      <title>Go Scheduler</title>
      <link>/posts/go-scheduler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/go-scheduler/</guid>
      <description>What is the Go Scheduler? Go scheduler’s purpose is to efficiently distribute goroutines over multiple OS threads.
Kernel thread is expensive; therefore, reducing and reusing kernel threads are keys.
initial goroutine stack comsumes 2 KB memory default thread stack comsumes 1 MB memory Scheduling Basics P (Processor) It is given a Logical Processor (P) for every virtual core. Runtime keeps track of each G and maps them onto Logical Processors. OS threads run on at most GOMAXPROCS number of processors.</description>
    </item>
    
    <item>
      <title>Go Testing</title>
      <link>/posts/go-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/go-testing/</guid>
      <description>Commands Test all file
go test Test all file including subdirectory
go test ./... ./... will cache your testing result
Expires all test results
go clean -testcache Ignore specific package
go test `go list ./... | grep -v your_go_app/utilities` Test specific package
go test your_go_app/utilities/ip Test specific func
go test -run TestListEvent Benchmark
go test -bench=. Race detection
go test -race Coverage Show coverage of code
go test -cover PASS coverage: 37.</description>
    </item>
    
    <item>
      <title>Go Third-party Packages</title>
      <link>/posts/go-third-party-packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/go-third-party-packages/</guid>
      <description>Debugger Installation
go get github.com/go-delve/delve/cmd/dlv Set breakpoint
import &amp;quot;runtime&amp;quot; func someFunction() { // ... some code ... runtime.Breakpoint() // This will act as your breakpoint // ... more code ... } Run
dlv debug yourprogram.go or
dlv test Commands continue or c: Continue execution until the next breakpoint. step or s: Execute the next line of code. next or n: Continue to the next line in the current function. list or ls: Show source code.</description>
    </item>
    
    <item>
      <title>How To Recover Deleted Files?</title>
      <link>/posts/recover-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/recover-files/</guid>
      <description>第一件事最重要 - 不要執行任何會覆寫硬碟的事情 也就是事情發生當下，停止一切複製，移動，安裝等等會讀寫硬碟的事情 如果硬碟在自架的主機，最保險的作法是馬上拆下來，接到其他電腦 如果是誤刪了遠端租用的主機資料，那也能靠遠端連線還原去救 使用R-Studio還原，他的特色： 要錢 （免費版只能還原64K以下的資料，而且不能還原RAID） 可以選擇要用本機還原或是遠端還原 線上付費後授權碼馬上就寄到你的E-Mail了 評價不錯，有興趣可以google看看 必看： 要還原硬碟要先掃描, 可能因為共有400～500G, 所以掃描很容易crash, 我掃了幾次才成功, 建議本機還原掃描時不要做其他事, 掃描後要進入硬碟前會有個讀取結構的動作, 我的會固定到55﹪就會當掉, 這軟體似乎並不是那麼靠譜的.. 所以要確定能還原成功再買授權，反正它的授權付完錢就寄給你了 註 ： 如果是還原 ext 2, 3, 4 版可以使用R-Linux這個方案，它免費最重要的是還原可以不受64K限制 我是使用win8去還原外接的ext4硬碟所以我買的是R-Studio NTFS的方案 它的設計是你可以先用免費的版本，開啟時都會問你要不要輸入授權，如果選擇試用，那版號就是試用，如果輸入授權碼（例如我輸入R-Studio NTFS授權碼），那啟動後就是R-Studio NTFS版 </description>
    </item>
    
    <item>
      <title>I/O</title>
      <link>/posts/io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/io/</guid>
      <description>測試 filesystem 讀寫速度 dd 只能測試寫入速度
$ dd if=/dev/zero of=/tmp/output conv=fdatasync bs=384k count=1k; rm -f /tmp/output 1024+0 records in 1024+0 records out 402653184 bytes (403 MB, 384 MiB) copied, 2.07614 s, 194 MB/s or
$ sync ; time sh -c &amp;quot;dd if=/dev/zero of=/tmp/output bs=100k count=1k &amp;amp;&amp;amp; sync&amp;quot; ; rm /tmp/output 1024+0 records in 1024+0 records out 104857600 bytes (105 MB, 100 MiB) copied, 0.0646765 s, 1.6 GB/s real 0m0.296s user 0m0.005s sys 0m0.</description>
    </item>
    
    <item>
      <title>Javascript Basics</title>
      <link>/posts/javascript-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/javascript-basics/</guid>
      <description>Ajax jQuery
$(document).ready(function(){ $.ajax({ url: &#39;/test/test_response.php&#39;, type: &amp;quot;POST&amp;quot;, data: &#39;test=1&amp;amp;test2=33&#39;, beforeSend: function(html) { $(&#39;#loading&#39;).removeClass(&#39;hide&#39;); }, success: function(response) { alert(response); }, complete: function () { $(&#39;#loading&#39;).addClass(&#39;hide&#39;); }, error: function(xhr, statusText, err){ alert(&amp;quot;Error:&amp;quot; + xhr.status); } }); }); PHP
// POST header(&#39;Content-Type: application/json&#39;); echo &#39;test=&#39;.$_POST[&#39;test&#39;].&#39;; test2= &#39;.$_POST[&#39;test2&#39;]; // GET echo &#39;test=&#39;.$_GET[&#39;test&#39;].&#39;; test2= &#39;.$_GET[&#39;test2&#39;]; // JSON $value = json_decode(file_get_contents(&#39;php://input&#39;)); //取得JSON字串並且解析 echo json_encode($value); //將$value轉成JSON格式傳回 Regex match Example 1
str = &#39;aabbddeeffggiiCC&#39;; reFee=/cc/i; //補上i(忽略大小寫) 才會為true document.</description>
    </item>
    
    <item>
      <title>jekyll Octopress (Archived)</title>
      <link>/posts/octopress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/octopress/</guid>
      <description>介紹 一個寫 blog 的 framework, 使用 markdown 語法快速的記下筆記, 再利用 generate 指令幫你生成 html, 你可以 deploy 到 github, 直接使用 github 當作你的 host, 就不需要自己再去找主機架設了, 並且使用 git 做版控, 未來要搬家到其他支援 markdown 語法的服務都非常方便, 也不怕文章遺失問題, 唯一缺點就是有點使用門檻
目前最新版本是 3.0
運作原理 source 存放著主程式，當 generate 時會產生在 /public 下，如果執行 preview 其實是看到這資料夾底下的檔案
當執行 deploy 時，會將原本的 _deploy 刪除，並將 /public 資料 copy 為 _deploy 並且 push 到 master
所以 github 上的 master 就是你的 _deploy 資料夾，在這資料夾外面，包含根目錄等等都是 source
而你輸入 example.github.io 就會連到 example.github.io 的 master branch
Octopress 3.</description>
    </item>
    
    <item>
      <title>JSON and JSONP</title>
      <link>/posts/json-and-jsonp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/json-and-jsonp/</guid>
      <description>JSON 中文被編碼問題 如果 ajax 設定值沒有 dataType 的話, 就代表是以預設方式接收, 此時接收到 php 回傳的 json 格式時, 中文會被編碼, 長得像 :
\u518d\u807d\u9019\u9996\u6b4c\u7684\u9ede 有四種方式可以解決: 第一種 : 在 jQuery 的 $.ajax({ 的屬性裡 , 將 dataType 指定為 json $.ajax({ url: &#39;index.php/ajax_load/content_loading/&#39;, type: &amp;quot;POST&amp;quot;, dataType: &amp;quot;json&amp;quot;, (以下略..) 則 ajax 回傳的 json 格式就會自動被轉換成物件了, 所以就可以用一般我們使用陣列的方式來取值
例如使用foreach來alert出陣列裡的資料 :
for(qq in response) (註 : response 為 php 回傳的 json 資料) { alert(response[qq]); } 第二種 : 與第一種原理一樣, 只不過我們手動把 json 轉為物件 response = JSON.parse(response); 這時 response 已被轉換為物件了, 就可以用陣列的方式來取值了</description>
    </item>
    
    <item>
      <title>Linux Account</title>
      <link>/posts/linux-account/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-account/</guid>
      <description>顯示 account 權限 show grants for test@&#39;%&#39;; 查詢所屬群組 $ id test uid=1000(test) gid=1000(test) groups=1000(test),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(sambashare),115(lpadmin) useradd adduser差別 useradd 只會建立帳號，沒有Home, password, 系統shell
新增 account sudo adduser newuser 或 RUN useradd --create-home -s /bin/bash test 將帳號加上 sudo 權限 方法1 加入: 將帳號加入 sudo group
sudo usermod -a -G sudo test 或 sudo adduser test sudo -a, &amp;ndash;add USER add USER to GROUP -d, &amp;ndash;delete USER remove USER from GROUP 移除: 將帳號移除 sudo group
sudo gpasswd -d test sudo 方法2 加入: 手動新增帳號到 /etc/sudoers :</description>
    </item>
    
    <item>
      <title>Linux Commands</title>
      <link>/posts/linux-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-commands/</guid>
      <description>Console 快捷鍵 畫面 Ctrl + l : 清畫面, 等於指令 clear Ctrl + z : 暫時停止程式(將該工作放到背景) (fg 1, fg 2 拿回) Ctrl + c : 終止正在執行的程式 Ctrl + s : 停止輸出到畫面上(類似 Scroll Lock, ex: cat xxx 需暫停時使用) Ctrl + q : 回復輸出到畫面上(恢復Ctrl+S的輸出) Ctrl + d : 結束輸入(如果您在 shell 下，就會跳出該 shell) 刪除 Ctrl + w : 刪除游標前一段指令，依空白為段落 Ctrl + u : 刪除游標前的字 Ctrl + k : 刪除游標後的字 Ctrl + h : Backspace 鍵功能 Ctrl + d : Del 鍵功能 移動 Ctrl + a : 游標移到最前面 Ctrl + e : 游標移到最後面 Ctrl + f : 往右移一個字元, 等同於右鍵 Ctrl + b : 往左移一個字元, 等同於左鍵 指令 Ctrl + x 接著按 Ctrl + e : 可以使用 vim 寫入 script 讓他一次執行 Ctrl + r : 尋找之前輸入過的指令 Ctrl + p : 上一個指令, 相當上鍵 Ctrl + n : 下一個指令, 相當下鍵 Ctrl + i : 同 Tab Ctrl + v + Tab : 輸入 Tab (空白) Ctrl + j : 同 Enter Ctrl + t : 相近兩個字元互換位置 Ctrl + - : undo Ctrl + v : 再加上要輸入特殊字元, ex: 先按 Ctrl-V 再按 Ctrl-C 會出現 ^C 而不是中斷 其他 Alt + f : 到此行的後一個字 Alt + b : 到此行的前一個字 Alt + d : 刪除游標之後的一個單字 ESC + t : 最後 兩個 &amp;ldquo;單字&amp;rdquo; 互換位置 set -o : 可以列出所有 Mode set -o vi : 可以用 vi 操作法來操作 Bash Shell(用此 Mode 上述的快速鍵即無作用) set -o emacs : Bash 預設就是此 Mode.</description>
    </item>
    
    <item>
      <title>Linux Compression</title>
      <link>/posts/linux-compression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-compression/</guid>
      <description>gzip Usage: gzip [OPTION]... [FILE]... Compress or uncompress FILEs (by default, compress FILES in-place). Mandatory arguments to long options are mandatory for short options too. -c, --stdout write on standard output, keep original files unchanged -d, --decompress decompress -f, --force force overwrite of output file and compress links -h, --help give this help -l, --list list compressed file contents -L, --license display software license -n, --no-name do not save or restore the original name and time stamp -N, --name save or restore the original name and time stamp -q, --quiet suppress all warnings -r, --recursive operate recursively on directories -S, --suffix=SUF use suffix SUF on compressed files -t, --test test compressed file integrity -v, --verbose verbose mode -V, --version display version number -1, --fast compress faster -9, --best compress better --rsyncable Make rsync-friendly archive With no FILE, or when FILE is -, read standard input.</description>
    </item>
    
    <item>
      <title>Linux Crontab</title>
      <link>/posts/linux-crontab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-crontab/</guid>
      <description>[1] 建立/var/www/test/hello.sh 檔: #!/bin/bash echo &amp;quot;Hello World&amp;quot; [2] 假使要每一分鐘執行一次hello.sh 執行:
$ crontab -e 會進入編輯器，輸入:
# 每分鐘執行一次 */1 * * * * echo &amp;quot;job every minute&amp;quot; &amp;gt;&amp;gt; /tmp/tz # 每 0:15, 12:15 分執行一次 15 0,12 * * * /bin/bash -l -c &#39;cd /var/www/web_app &amp;amp;&amp;amp; RAILS_ENV=development bundle exec rake schedule:check_something --silent&#39; # 星期一～五 9am~18pm 00 09-18 * * 1-5 /home/ramesh/bin/check-db-status 格式 : 分(0-59), 時(0-23) ,日(1-31) ,月(1-12) ,週(0-6), Command
[3] 其他指令 : 執行排程並不會影響到你目前工作視窗，因為它是背景執行的，所以每隔一分鐘, 並不會看到 &amp;ldquo;Hello World&amp;rdquo; 字串出現在畫面上，但它會在每一次執行時紀錄在log裡</description>
    </item>
    
    <item>
      <title>Linux curl</title>
      <link>/posts/linux-curl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-curl/</guid>
      <description>-i -I 顯示 response 的 detail 只顯示 header
curl -I http://wwww.example.com 顯示 header + body
curl -i http://wwww.example.com -H 指定 Header curl -H &amp;quot;Authorization:Bearer NDQzYmM1ZD&amp;quot; http://www.example.com -D 將 response 的 header 輸出成檔案 curl www.google.com -D /tmp/google-cookie.txt v 顯示 request/reqsponse 的 request detail curl -v http://wwww.example.com -L support 302 redirect $ curl -L www.google.com -x 指定 proxy curl -x proxy.example2.com:8080 http://www.example.com -b 使用指定的 cookie curl -b cookie.txt http://www.example.com -e Referrer (若該網站限制需先訪問網站首頁才能訪問下載頁) curl -e &amp;quot;www.</description>
    </item>
    
    <item>
      <title>Linux File System</title>
      <link>/posts/linux-file-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-file-system/</guid>
      <description>inode 在linux下，一個檔案產生後，會有一個inode，可以用來當作這個檔案的編號。 假設有一個檔案叫做cc.txt，它的inode編號為135， 當我用mv移動到不管哪個資料夾下，它的inode編號依然會是135， 但當使用cp複製它時，它的inode編號就會重新指派了。
查看inode ls -i 7042739 README.md 6954370 bashrc 2287673 bin 用 inode 找 file / folder find ~/conf -inum 2287673 /Users/test/conf/bin FAT32 支援 windows, mac 單檔最大 4GB 最大容量 2TB 較容易 disk errosr 效率稍差 exFAT 支援 windows, mac, linux 單檔最大 4GB 最大容量 2TB NTFS (windows only) windows 原生支援 在 mac 上只能讀 最大單檔 16TB 最大容量 256TB HFS+ mac 原生支援 Required for Time Machine 最大單檔 8EiB 最大容量 8EiB XFS xfs 是一種 file system 的 format, 像 ext4 一樣, 不過它特別的地方在於它可以方便的對目錄做 quota 限制 Ubuntu 安裝 : sudo apt-get install xfsprogs xfsdump Set quota : Make the filesystem and mount it:</description>
    </item>
    
    <item>
      <title>Linux grep</title>
      <link>/posts/linux-grep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-grep/</guid>
      <description>一般用法 grep -R &#39;時間&#39; * -r, &amp;ndash;recursive like &amp;ndash;directories=recurse -R, &amp;ndash;dereference-recursive likewise, but follow all symlinks &amp;ndash;include=FILE_PATTERN search only files that match FILE_PATTERN &amp;ndash;exclude=FILE_PATTERN skip files and directories matching FILE_PATTERN &amp;ndash;exclude-from=FILE skip files matching any file pattern from FILE &amp;ndash;exclude-dir=PATTERN directories that match PATTERN will be skipped. &amp;ndash;exclude-dir={dir1,dir2,dir3} directories that match PATTERN will be skipped. -i, &amp;ndash;ignore-case ignore case distinctions -P, &amp;ndash;perl-regexp -o, &amp;ndash;only-matching grep ^d：過濾出資料夾
OR 沒有任何 option, 必須使用 \| 來分隔 pattern :</description>
    </item>
    
    <item>
      <title>Linux iptables</title>
      <link>/posts/linux-iptables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-iptables/</guid>
      <description>基本設定 /etc/iptables.firewall.rules:
*filter # Allow all loopback (lo0) traffic and drop all traffic to 127/8 that doesn&#39;t use lo0 -A INPUT -i lo -j ACCEPT -A INPUT -d 127.0.0.0/8 -j REJECT # Accept all established inbound connections -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT # Allow all outbound traffic - you can modify this to only allow certain traffic -A OUTPUT -j ACCEPT # Allow HTTP and HTTPS connections from anywhere (the normal ports for websites and SSL).</description>
    </item>
    
    <item>
      <title>Linux Locale</title>
      <link>/posts/linux-locale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-locale/</guid>
      <description>指令 查詢目前的語系設定：
$ locale locale: Cannot set LC_CTYPE to default locale: No such file or directory locale: Cannot set LC_MESSAGES to default locale: No such file or directory locale: Cannot set LC_ALL to default locale: No such file or directory LANG=zh_TW.UTF-8 LANGUAGE= LC_CTYPE=&amp;quot;zh_TW.UTF-8&amp;quot; (...略...) LC_MEASUREMENT=&amp;quot;zh_TW.UTF-8&amp;quot; LC_IDENTIFICATION=&amp;quot;zh_TW.UTF-8&amp;quot; LC_ALL= 查詢已安裝的語系：
$ locale -a locale: Cannot set LC_CTYPE to default locale: No such file or directory locale: Cannot set LC_MESSAGES to default locale: No such file or directory locale: Cannot set LC_COLLATE to default locale: No such file or directory C C.</description>
    </item>
    
    <item>
      <title>Linux logrotate</title>
      <link>/posts/linux-logrotate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-logrotate/</guid>
      <description>(最後更新: 2016-04-27)
介紹 設定 log 定期壓縮及輩份，通常是 /var/log 下的 log，主要是控制 log 的大小不要越來越大
如何設定 有兩個地方可以設定
/etc/logrotate.conf : 直接寫在裡面 /etc/logrotate.d/ : 新增你想要控制 log 的程式，比較建議寫在這裡，一個程序 (i.e. nginx) 就是一個檔案，方便管理 但不管寫在哪裡效果都是一樣的，因為 /etc/logrotate.d/ 下的檔案最後也是會被讀取到 /etc/logrotate.conf 裡執行
參數 daily | weekly | monthly : 進行 rotate 的間隔 rotate 7 : 保留 7 份 log, 也就是只會保留到 mysql.log.7.gz create : 如果 log 被改名，建立一個新的繼續儲存 create 0664 root web-admin : 設定新建的 log 檔的權限與擁有者/群組 dateext : 被輪替的檔案加上日期作為檔名 compress : 壓縮輩份的 log，預設使用 gzip minsize 50M : rotates only when the file has reached an appropriate size and the set time period has passed.</description>
    </item>
    
    <item>
      <title>Linux mkfifo</title>
      <link>/posts/linux-mkfifo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-mkfifo/</guid>
      <description>介紹 用在兩個不同執行的程式溝通, 他就像是一條水管(pipeline file)將兩個程式連接起來
其中一邊不斷的將水倒進去, 另一邊則取水, 這樣就可以達到資料
Example session 1 : 建立 pipe
cd /tmp mkfifo test 傳送資料進去
echo &amp;quot;Hello Jex&amp;quot; &amp;gt; test echo &amp;quot;line 1&amp;quot; &amp;gt; test&amp;amp; 在命令的最後面加上 &amp;amp; 可以讓它背景作業
session 2 : 將 session 1 存的資料拿出來
cd /tmp cat test fifo (命名通道) 這些參數似乎要用 C 寫才能使用
讀 :
O_NONBLOCK enable : 立刻返回成功 O_NONBLOCK dieable : block 直到有資料寫入而開啟 FIFO 寫 :
O_NONBLOCK enable : 立刻返回失敗, error code 為 ENXIO O_NONBLOCK dieable : block 直到有資料寫入而開啟 FIFO 打開檔案預設是 block</description>
    </item>
    
    <item>
      <title>Linux nc (netcat)</title>
      <link>/posts/linux-netcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-netcat/</guid>
      <description>介紹 用來連接特定 port, 或啟動一個 port 來監聽, 可以執行簡單的訊息或檔案傳送
有些系統將 nc 改為 netcat
快速看如何使用 啟動 20000 port
nc -l 192.168.1.171 20000 如果不加上 IP, 就會監聽所有從 20000 port 進來的主機 -l ：作為監聽之用，亦即開啟一個 port 來監聽用戶的連線； -u ：不使用 TCP 而是使用 UDP 作為連線的封包狀態 連線到 20000 port
nc 192.168.1.171 20000 然候就可以隨便打一些字, 送出後主機那就會看到了, 也可搭配 stdout, stdin 做互動輸入/輸出
傳送/接收 檔案 傳送檔案
$ cat backup.iso | nc 54.250.122.78 3333 接收檔案並存入 backup.iso
$ nc -l 3333 &amp;gt;&amp;gt; backup.iso 傳送顯示進度條
$ cat backup.iso | pv -b | nc 54.</description>
    </item>
    
    <item>
      <title>Linux netstat</title>
      <link>/posts/linux-netstat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-netstat/</guid>
      <description>常用 -t: tcp -u: udp -n: don&amp;rsquo;t resolve names -l: listening -p: show pid or program name -i: Display a table of all network interfaces. -a: Show both listening and non-listening sockets. 如果 netstat / lsof 無法顯示出 pid or program name 要改用 sudo 執行 列出在監聽的網路服務:
netstat -tunl 列出所有的連線
netstat -antp 列出已連線的網路連線狀態:
netstat -tun 刪除已建立或在監聽當中的連線:
netstat -tunp #看他的pid ex: 10270 kill -9 10270 netstat -nltp 顯示 timer
$ netstat -antop tcp 0 0 0.</description>
    </item>
    
    <item>
      <title>Linux nmap</title>
      <link>/posts/linux-nmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-nmap/</guid>
      <description>介紹 有時候你想知道該網域下有哪些 ip 正在使用或有哪些 port 是開放的, 就可以使用 nmap 來檢查
安裝 ubuntu :
sudo apt-get install nmap 使用 假如已經有確定的 port 想知道是否開放可直接用 telnet nc telnet xxx.oo 8010 或
$ nc -zv test-db.c6c8mn7tsdgv0.us-west-2.rds.amazonaws.com 3306 Connection to test-db.c6c8mn7tsdgv0.us-west-2.rds.amazonaws.com 3306 port [tcp/mysql] succeeded! -z: Specifies that nc should just scan for listening daemons, without sending any data to them. It is an error to use this option in conjunction with the -l option. -v: Have nc give more verbose output.</description>
    </item>
    
    <item>
      <title>Linux rsync</title>
      <link>/posts/linux-rsync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-rsync/</guid>
      <description>本機同步資料夾 以 /tmp/destination/ 為主要, 將 /tmp/source/ 同步
rsync -avr --delete /tmp/destination/ /tmp/source/ -a, &amp;ndash;archive archive mode; equals -rlptgoD (no -H,-A,-X) -v, &amp;ndash;verbose increase verbosity -r, &amp;ndash;recursive recurse into directories &amp;ndash;delete delete extraneous files from destination dirs -e, &amp;ndash;rsh=COMMAND specify the remote shell to use 將本機資料夾複製到遠端 projects/ 下 rsync -ae &amp;quot;ssh -p 9022&amp;quot; test test@106.185.77.26:/home/test/note/projects/ 將遠端的 test 資料夾 sync 到 /tmp rsync -av -e ssh test@example.com:~/test/ /tmp 注意!! test 資料夾後面一定要加/ 以上指令不會將 tmp 有但 test 沒有的檔案做刪除, 如果要與 test 完全一樣, 加上 --delete 參數即可 將本地的資料夾 sync 到遠端 rsync -av -e ssh /tmp/test test@example.</description>
    </item>
    
    <item>
      <title>Linux S.M.A.R.T.</title>
      <link>/posts/linux-smart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-smart/</guid>
      <description>S.M.A.R.T. 檢測你的硬碟健康狀態
Installation sudo apt-get install smartmontools 當硬碟不支援時顯示 Unavailable : test_user@test-VirtualBox [stp:1] { /var/www }$ sudo smartctl -i /dev/sda1 smartctl 5.43 2012-06-30 r3573 [x86_64-linux-3.8.0-19-generic] (local build) Copyright (C) 2002-12 by Bruce Allen, http://smartmontools.sourceforge.net === START OF INFORMATION SECTION === Device Model: VBOX HARDDISK Serial Number: VB47e46d42-bbe471de Firmware Version: 1.0 User Capacity: 8,589,934,592 bytes [8.58 GB] Sector Size: 512 bytes logical/physical Device is: Not in smartctl database [for details use: -P showall] ATA Version is: 6 ATA Standard is: ATA/ATAPI-6 published, ANSI INCITS 361-2002 Local Time is: Fri May 17 10:08:11 2013 CST SMART support is: Unavailable - device lacks SMART capability.</description>
    </item>
    
    <item>
      <title>Linux sed and awk</title>
      <link>/posts/linux-sed-awk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-sed-awk/</guid>
      <description>sed -i : is used to affect the file. ^ : is a beginning of line $ : is a end of line d : delete if there is a empty line ((.|\n)*) : multiple line 刪除含有FOO及BAR這兩個字串的行 sed &amp;quot;s/^.*FOO.*BAR.*$//g&amp;quot; fstab 這作法該行被刪除，但是會是空的一行
改成 :
sed &amp;quot;/^.*FOO.*BAR.*$/d&amp;quot; file.txt 該行被刪除，不會變成空行
去除空行 sed -i &amp;quot;/^\s*$/d&amp;quot; file.txt 取代空白 \s* 取代 windows 換行 sed -i &#39;s/\r$//&#39; wrap-trim.log 修改檔案內容 假設有一個test檔:
$a = &#39;ccc&#39;; $b = &#39;ddd&#39;; $c = &#39;ccc&#39;; $d = &#39;fff&#39;; 將取代結果印出,但還不會做取代的動作</description>
    </item>
    
    <item>
      <title>Linux sendmail</title>
      <link>/posts/linux-sendmail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-sendmail/</guid>
      <description>sendmail 使用本機寄信的套件
安裝 sudo apt-get install sendmail 測試 sendmail xxx@example.com Subject: Test from example.com Hello~anyone! . Troubleshootings 如果網站 hostname 有改過, 會發現寄信很慢, 甚至要一分鐘以上 在 /etc/hosts 的 127.0.1.1 加上以下兩個 hostname :
127.0.1.1 ubuntu 106-185-47-26 106-185-47-26.localhost 如果 example.com 當作 gmail 的信箱, 主機 hostname 又設定成 example.com 的話 如果寄到
sendmail xxx@example.com Subject: Test from example.com Hello~anyone! . 就會得到寄不出信的錯誤
/home/jxxx/dead.letter... Saved message in /home/jxxx/dead.letter
/var/log/mail.log 也會報錯
sm-mta[17354]: s6T7p65B017354: Milter (opendkim): error connecting to filter: Connection refused by localhost 會有這樣的訊息, 是因為主機認為是寄到 localhost 的, 所以就不會寄出</description>
    </item>
    
    <item>
      <title>Linux Shell Script</title>
      <link>/posts/linux-shell-script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-shell-script/</guid>
      <description>Basics 接收傳入參數 建立test.sh內容:
#!/bin/bash echo $0 echo $1 echo $2 執行你的shell檔案，並將要傳入的參數加在後面
$ sh test.sh hello 11 22 test.sh # 檔名 hello # 第一個參數 11 # 第二個參數 讀寫檔案內容 建立test.sh內容:
cat &amp;gt; qq.php &amp;lt;&amp;lt; EOF this is line 1 this is line 1 EOF 執行後就會產生qq.php檔案了，檔案內容為EOF框起來的內容
寫檔換行 :
echo -e &amp;quot;line1\nline2&amp;quot; | tee -a /tmp/q.txt append到檔案最後面
tee -a /tmp/t.txt &amp;lt;&amp;lt; EOF line 1 line 2 EOF 讀取檔案，將每行放入陣列
file=1.txt seq=1 while read line do lines[$seq]=$line ((seq++)) done &amp;lt; $file for ((i=1;i&amp;lt;=${#lines[@]};i++)) do echo ${lines[$i]} done 使用sh執行會有錯誤，但bash執行沒問題</description>
    </item>
    
    <item>
      <title>Linux strace</title>
      <link>/posts/linux-strace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-strace/</guid>
      <description>Installation $ sudo apt install strace #Debian/Ubuntu # yum install strace #RHEL/CentOS # dnf install strace #Fedora 22+ Trace linux command Simply run a command with strace, tracing of all system calls, e.g. df -h.
sudo strace df -h trace PID
sudo strace -p 5206 Get summary of process Generate a report of total time, calls, and errors for each system call.
sudo strace -c -p 5206 % time seconds usecs/call calls errors syscall ------ ----------- ----------- --------- --------- ---------------- 90.</description>
    </item>
    
    <item>
      <title>Linux Swap</title>
      <link>/posts/linux-swap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-swap/</guid>
      <description>swap 指令 通常安裝主機都會設定 swap 但如果沒有 swap 或要增加 swap 可自行設定 開
sudo swapon -a 關
sudo swapoff -a 釋放 swap
sudo swapoff -a sudo swapon -a 查看 swap 狀態
swapon -s 另種方式看 Swap 的狀態
$ free -m total used free shared buffers cached Mem: 992 711 281 0 83 418 -/+ buffers/cache: 209 782 Swap: 0 0 0 建立/增加 swap 建立 1G swap
sudo dd if=/dev/zero of=/swapfile bs=1M count=1024 掛載這個 Swap</description>
    </item>
    
    <item>
      <title>Linux systemd</title>
      <link>/posts/linux-systemd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-systemd/</guid>
      <description>設定檔 /etc/systemd/system/test.service:
[Unit] Description=test [Service] User=ec2-user ExecStart=/bin/sh -c &amp;quot;/home/ec2-user/my_app/test &amp;gt;&amp;gt; /tmp/test.log 2&amp;gt;&amp;amp;1&amp;quot; Restart=always [Install] WantedBy=multi-user.target 其他 [Service] 參數
WorkingDirectory=/home/ec2-user/my_app config 權限 root 644 測試沒問題 WantedBy: directive is the most common way to specify how a unit should be enabled. 其他參數 主機啟動時在 network 後才啟動
[Unit] After=syslog.target network.target remote-fs.target nss-lookup.target 指令 重讀設定檔(修改後都要執行)
sudo systemctl daemon-reload 查看 systemd 執行 log
sudo systemctl status test Enable it to run at boot:
sudo systemctl enable test Start it</description>
    </item>
    
    <item>
      <title>Linux tcpdump</title>
      <link>/posts/linux-tcpdump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-tcpdump/</guid>
      <description>Tcpdump 監聽封包 sudo tcpdump -i lo -nn port 8080 13:45:48.703124 IP 127.0.0.1.42893 &amp;gt; 127.0.0.1.8080: Flags [S], seq 2569649818, win 43690, options [mss 65495,sackOK,TS val 2431608 ecr 0,nop,wscale 6], length 0 13:45:48.703130 IP 127.0.0.1.8080 &amp;gt; 127.0.0.1.42893: Flags [S.], seq 986657362, ack 2569649819, win 43690, options [mss 65495,sackOK,TS val 2431608 ecr 2431608,nop,wscale 6], length 0 13:45:48.703137 IP 127.0.0.1.42893 &amp;gt; 127.0.0.1.8080: Flags [.], ack 1, win 683, options [nop,nop,TS val 2431608 ecr 2431608], length 0 13:45:48.</description>
    </item>
    
    <item>
      <title>Linux TTY/PTY</title>
      <link>/posts/linux-tty-pty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-tty-pty/</guid>
      <description>What is TTY/PTY? TTY (teletype) is a terminal used to transfer the input and output from devices.
PTY (pseudo-teletype) is a pseudoterminal that provides a terminal emulator like tty does.
How does TTY work? Diagram:
┏━━━━━━━━━━━━┓ ┏━━━━━━━━━━━━━━━━━━━┓ ┏━━━━━━━━━━━━━━┓ ┏━━━━━━━━━━━━━━┓ ┏━━━━━━━━━━━━━━┓ ┏━━━━━━━━━━━━━━━┓ ┃ monitor ┣━━┫ VGA driver ┣━━┫ ┃ ┃ ┃ ┃ ┣━━┫ User process ┃ ┗━━━━━━━━━━━━┛ ┗━━━━━━━━━━━━━━━━━━━┛ ┃ Terminal ┣━━┫ Line ┣━━┫ TTY ┃ ┗━━━━━━━━━━━━━━━┛ ┏━━━━━━━━━━━━┓ ┏━━━━━━━━━━━━━━━━━━━┓ ┃ emulator ┃ ┃ Discipline ┃ ┃ driver ┃ ┏━━━━━━━━━━━━━━━┓ ┃ keyboard ┣━━┫ Keyboard driver ┣━━┫ ┃ ┃ ┃ ┃ ┣━━┫ User process ┃ ┗━━━━━━━━━━━━┛ ┗━━━━━━━━━━━━━━━━━━━┛ ┗━━━━━━━━━━━━━━┛ ┗━━━━━━━━━━━━━━┛ ┗━━━━━━━━━━━━━━┛ ┗━━━━━━━━━━━━━━━┛ 0,1,2 fds are allocated to shell</description>
    </item>
    
    <item>
      <title>Linux upstart</title>
      <link>/posts/linux-upstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-upstart/</guid>
      <description>介紹 upstart 用來管理你的服務, 在機器啟動後自動幫你啟動你的服務, 並且可以選擇在服務死掉後自動重新啟動它
ubuntu 16.04 不支援 upstart 改用 systemd
First Example 這是個簡單的範例只有執行 echo, 執行完也不會有任何背景的 process 在執行
建立 /etc/init/testjob.conf:
description &amp;quot;First example&amp;quot; author &amp;quot;test&amp;quot; start on runlevel [2345] exec echo `date` &amp;gt;&amp;gt; /tmp/testjob.log 測試 conf 語法是否正確
$ init-checkconf /etc/init/testjob.conf File /etc/init/testjob.conf: syntax ok 開始啟動
$ sudo service testjob start testjob stop/waiting 顯示結果 /tmp/testjob.log:
Tue Aug 8 11:32:54 UTC 2017 Second Example 這個範例可以保持你想要的 process 在背景執行
首先我們要先有一個不會停止的程式供測試, /tmp/test.sh:
#!/bin/sh while true do echo `date` &amp;gt;&amp;gt; /tmp/testjob.</description>
    </item>
    
    <item>
      <title>Linux Vim</title>
      <link>/posts/linux-vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-vim/</guid>
      <description>Command vim http://www.google.com : 開啟google原始碼 vim -p qq.php cc.php : 用tabe顯示，用gt切換下一個tabe vim -O qq.php cc.php : 垂直分割顯示 vim -o qq.php cc.php : 水平分割顯示 vim -u NONE cc.php : 不要進行初始化直接開啟檔案 (對開大檔會快很多) 新增、刪除、插入 O : 在游標那行的上一行插入新的一行 o : 在游標那行的下一行插入新的一行 I : 在該行的第一個字元進入插入模式 i : 在游標前進入插入模式 A ( = $ + a) : 在該行的最後一個字元進入插入模式 a : 在游標後進入插入模式 C : 刪除游標後的字串並進入到insert模式 cc : 刪除該行並進入到insert模式(保留縮排) 1cj : 刪除游標該行及下一行共2行並進入插入模式 D : 刪除游標後的字串 dd : 刪除整行 2dd : 刪除下列2行 10dh : 向左刪除10個字元 d0 : 刪除游標位置前的字元 d^ : 刪除游標位置前的字元(保留縮排) d$ : 刪除游標位置到最後一個字元 de : 刪除游標位置到區塊的最後一個字元 db : 向前刪除區塊單字 dw : 向後刪除區塊單字 x : 刪除游標所在的字元 X : 向前刪除字元 s : 刪除游標那個字元並進入 insert 模式 S : 同 cc 10x : 刪除游標後的5個字元 J : 將游標所在列與下一列的資料結合成同一列 3J : 將下兩行包含游標該行共3行合併成一行 d0 : 游標所在處向前刪除到第0格 d^ : 游標所在處向前刪除到縮排處停止 diw : 刪除游標上的單字 ciw : 刪除游標上的單字並進入insert模式 cw : 刪除在單字上游標以後字串 ci&#39; : 刪除單引號內的字串並進入insert模式 ci&amp;quot; : 刪除雙引號內的字串並進入insert模式 ci( : 刪除括號內的內容並進入insert模式 ci[ : 刪除中括號內的內容並進入insert模式 ci{ : 刪除大括號內的內容並進入insert模式 ci&amp;lt; : 刪除&amp;lt;(內容)&amp;gt;並進入insert模式 ca&#39; : 刪除單引號內的字串及單引號並進入 insert 模式 di&#39; : 刪除單引號內的字串 dst : 刪除 html 標籤, 但內容會保留 dit : 刪除 html 標籤內容, 但標籤會保留 cit : 刪除 html 標籤內容, 並進入 insert 模式 6i 或 6a + 任意字串 : 6 次 * 任意字串 d/a : 刪到 a 為止 guu : 整行變小寫 gUU : 整行變大寫 g~~ : 整行大小寫交換 複製、剪下、貼上 shift + Insert : (insert模式下)將系統剪貼簿貼上游標位置。 ctrl + v : 對區塊共同做編輯 ctrl + v 選取後按c : 把選取的字刪掉並進入insert模式 V(select whole line) + y : 相當於 ctrl + c v(select area) + y : 相當於 ctrl + c P : 貼上於目前游標的上一行 p : 貼上於目前游標的下一行，相對於 ctrl + v y1G : 複製游標所在列到第一列的所有資料 y0 : 複製游標所在的那個字元到該行行首的所有資料 y$ : 複製游標所在的那個字元到該行行尾的所有資料 yy : 複製游標所在的那一行 20yy : 複製 20 行 Y : 複製游標所在的那一行 :m+ : 把目前這一行往下移動一行 :m-2 : 把目前這一行往上移動一行 shift + insert : 在insert模式貼上滑鼠複製的東西 [p : 貼到游標前 ]p : 貼到游標後 dip : 刪除最外層的tag及裡面的所有內容 yiw : 複製單字 yi&#39; : 複製單引號內的字串 vi&#39; : 選取單引號內的字串並進入visual模式 &amp;quot; + a + y + i + &#39; : 將單引號的內容(不包含單引號)存進暫存a &amp;quot; + a + y + a + &#39; : 將單引號的內容(包含單引號)存進暫存a v + ^ + y : 複製從游標到最前面的字串 vitp : 貼在 HTML Tag 裡 :2y : copy 第 2 行 :2,7y : copy 第 2 ~ 7 行 Visual模式 ~ : 在visual模式已選取下，切換大 / 小寫 U : 在visual模式已選取下，轉成大寫 u : 在visual模式已選取下，轉成小寫 viw : 選取游標上的單字並進入visual模式。(v = visual, i = inside, w = word) vit : 選取&amp;lt;tag&amp;gt;裡面的內容並進入visual模式。例: &amp;lt;a href=&#39;#&#39;&amp;gt;(選取這一塊)&amp;lt;/a&amp;gt; vat : 選取&amp;lt;tab&amp;gt;全部內容包含&amp;lt;tag&amp;gt;本身，並進入visual模式(a = around)。選取&amp;lt;a .</description>
    </item>
    
    <item>
      <title>Linux xargs</title>
      <link>/posts/linux-xargs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/linux-xargs/</guid>
      <description>介紹 build and execute command lines from standard input
用法 假設有個檔案結構如下 :
$ tree test test ├── c1 │ ├── ii.del │ └── pp.ext ├── c2 │ ├── gg.del │ └── hh.ext └── c3 ├── c3-1 │ ├── qq.del │ └── xx.ext ├── cc.ext └── ff.del 4 directories, 8 files 如果我要刪除 test 下所有 *.del 的檔案
找出 *.del
$ find test -name &amp;quot;*.del&amp;quot; test/c3/ff.del test/c3/c3-1/qq.del test/c2/gg.del test/c1/ii.del 加上 xargs 指令, 可以一次幫你把找到的結果刪除</description>
    </item>
    
    <item>
      <title>Mac OS X</title>
      <link>/posts/mac-environment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/mac-environment/</guid>
      <description>一般鍵盤接 Mac 系統偏好設定→鍵盤 TAG選鍵盤，再點下面的變更鍵 下拉選單選USB插上的鍵盤 → OPTION 選 ⌘ 而 ⌘ 選 OPTION 也就是兩個對調，ALT 就成了⌘ 鍵
RAR 安裝
brew install unrar 將 multi part rar files 解開 unrar x -e video.part1.rar 會自動將其它部份一起解開
iTerm ⌘ + d : 垂直 split windows ⌘ + shift + d : 水平 split windows ⌘ + t : 打開分頁 ⌘ + shift + 左右鍵 : 移動 tab 位置 ⌘ + 左右 : 切換 iterm2 的 tab ⌘ + shift + { or } : 切換 tab // 與上行功能一樣, 可刪?</description>
    </item>
    
    <item>
      <title>Messaging API</title>
      <link>/posts/messaging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/messaging/</guid>
      <description>Slack Create a workplace Create a channel Set up an app https://api.slack.com/apps (even you have alrady created a workplace) Click on &amp;ldquo;Your Apps&amp;rdquo; in the top right corne Click on &amp;ldquo;Create New App&amp;rdquo; and finish the flow Click on &amp;ldquo;OAuth &amp;amp; Permissions&amp;rdquo; on left menu Section &amp;lsquo;Scopes&amp;rsquo;: chat:write Section &amp;lsquo;OAuth Tokens for Your Workspace&amp;rsquo; click &amp;lsquo;Install to Workplace&amp;rsquo; You will get a token which can be used by your app You will see your bot app is on the left menu of your slack app Invite bot app into the channel by tagging @botName and inviting it into the channel Other docs</description>
    </item>
    
    <item>
      <title>MQTT</title>
      <link>/posts/mqtt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/mqtt/</guid>
      <description>Introduction MQTT 是設計給 IOT 的 messaging protocal (pub/sub), 因為它很輕量且效率好, 在 client 實作上它比 AMQP 需要更少的資源, 另外 mqtt 本身沒有支援 authorization (這段需要在 server 端自已實作)
Install client command Command line tool node.js 的 mqtt tool
npm install mqtt --save npm install mqtt -g Command Subscribe
mqtt sub -h my-mqtt-server.com -t my_topic -u mqtt_username -P mqtt_password Publish
mqtt pub -h my-mqtt-server.com -t my_topic -u mqtt_username -P mqtt_password -m &#39;Hello world&#39; Via SSL
mqtt pub -h my-mqtt-server.</description>
    </item>
    
    <item>
      <title>Network</title>
      <link>/posts/network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/network/</guid>
      <description>OSI Model The OSI model is a theoretical model designed to understand and describe how different network protocols interact and work together. In the real world, protocols don&amp;rsquo;t always fit neatly into a single layer and may operate across multiple layers.
Standard OSI model Layer 1 - Physical electric signals / driver the data gets converted into a bit stream (1/0) Bits -&amp;gt; Signal Layer 2 - Data Link frames / mac address / ethernet facilitates data transfer between two devices on the same network Frame (breaks packets into smaller pieces called frames) Layer 3 - Network IP / ARP / ICMP destination and source IP Packet (break segments into smaller units called packets and reassembles these packets on the receiving device) Layer 4 - Transport TCP / UDP destination and source Port to identify services or applications Segment (break the data into chunks called segments) Layer 5 - Session connection establishment / TLS state / stateful / cookie session Layer 6 - Presentation encoding / serialisation JSON object / UTF-8 Layer 7 - Application HTTP / FTP / gRPC TCP/IP model</description>
    </item>
    
    <item>
      <title>Network Bi-directional Protocols</title>
      <link>/posts/network-bidirectional-protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/network-bidirectional-protocols/</guid>
      <description>Websocket a protocol that operates over a TCP connection bi-directional communication protocol it&amp;rsquo;s stateful because it involves establishing a long-lived TCP connection support binary data like images, audio, video, or any raw binary content it&amp;rsquo;s stateful Server-Sent Events (SSE) SSE uses HTTP/1 unidirectional communication protocol from server to client it allows a web server to push updates to a client is text-based and doesn&amp;rsquo;t support binary data over http/2 It&amp;rsquo;s binary, instead of textual, making it more efficient to parse It&amp;rsquo;s still unidirectional updates (server to client) over http/3 chatGPT uses this protocol over http/3 text/event-stream; charset=utf-8 WebRTC (Web Real-Time Communication) real-time communication directly between browsers or apps used for video and audio chat, but it can also be used for text chat Large data transfer Direct use on browser MQTT (Message Queuing Telemetry Transport) check here</description>
    </item>
    
    <item>
      <title>Network DHCP</title>
      <link>/posts/network-dhcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/network-dhcp/</guid>
      <description>發送流程 [1] client 以 UDP 發出 DHCPDISCOVER 廣播封包尋找 DHCP Server 來源位址 : 0.0.0.0:68 目的位址 : 255.255.255.255:67
當 client 開機或重啟網卡時會發出此的封包
[2] DHCP Server 發出 DHCPOFFER 廣播封包給 client 來源位址 : 192.168.181.30:67 目的位址 : 255.255.255.255:68
收到請求會先依據 client 的 MAC 來判斷以下
到伺服器的登錄檔中尋找該用戶之前是否曾經用過某個 IP ，若有且該 IP 目前無人使用，則提供此 IP 給用戶端； 若設定檔針對該 MAC 提供額外的固定 IP (static IP) 時，則提供該固定 IP 給用戶端； 若不符合上述兩個條件，則隨機取用目前沒有被使用的 IP 參數給用戶端，並記錄下來。 接著 server 提供一組 IP 及租約期限訊息給 client, 如果網路有很多台 DHCP Server, client 會以收到的第一個 DHCPOFFER 訊息為主
[3] client 發出 DHCPREQUEST 給 DHCP Server 來源位址 : 0.</description>
    </item>
    
    <item>
      <title>Network DNS</title>
      <link>/posts/network-dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/network-dns/</guid>
      <description>How DNS resolution works when entering &amp;ldquo;example.com&amp;rdquo; into browser? Browser cache check: the brwoser first checks its own cache to see if it has the IP of &amp;ldquo;example.com&amp;rdquo; Operating system cache check: operating system also maintain a DNS cache Resolver or Recursive DNS servers cache check: the system makes a request to the recursive DNS servers provided by your Internet Service Provider (ISP), or another provider like Google DNS or Cloudflare.</description>
    </item>
    
    <item>
      <title>Network DNS server - bind9</title>
      <link>/posts/network-dns-bind9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/network-dns-bind9/</guid>
      <description>Introduction Bind9 是一個可以架設 dns server 的套件
Installation sudo apt-get install bind9 bind9-doc dnsutils config /etc/bind named.conf : 主要設定檔, bind 啟動會讀取它, 它會負責讀取其他檔案 named.conf.local : 裡面可以設定正反解的zone, 在裡面加入 zone 的 DNS record 存放位置以及 DNS server 的形態 named.conf.options : 主要在設定dns的一些選項和安全性. 其他的檔案就是預設的一些localhost的正反解相關, 這裡我們不用理他沒關係 add blog.example.com name.conf.options 不用改
name.conf.local 正解 :
zone &amp;quot;example.com&amp;quot; { type master; file &amp;quot;/etc/bind/zones/example.com.db&amp;quot;; }; 反解只有 ISP 可以做到, 所以我就不設定了
/etc/bind/zones/example.com.db 自行建立 zones 資料夾, zone 都放在這裡方便管理
改設定要記得增加Serial值
$TTL 604800 ; 指定 SOA @ IN SOA ns.</description>
    </item>
    
    <item>
      <title>Network HTTP</title>
      <link>/posts/network-http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/network-http/</guid>
      <description>HTTP/1 vs HTTP/2 vs HTTP/3 HTTP/1 build on TCP each request to the same server requires the process of TCP connection (3-way handshake) HTTP/1.1 introduce the keep-alive mechanism, which allows a connection can be used for multiple requests reduce latency because each request doesn&amp;rsquo;t need to do 3-way handshake HTTP/2 published in 2015 introduce HTTP streams multiple streams of requests sent to the same server on a single TCP connection each stream is independent of each other introduce push it allows server to send updates to the clients without polling HTTP/3 published in Jun 2022 use a new protocol called QUIC based on UDP introduce streams as the first-class citizen at transport layer QUIC streams share the same UDP connection, no handshakes are required streams are independent, packet loss affecting one stream doesn&amp;rsquo;t affect others designed for mobile heavy internet usage Use connection ID, which allows connections to move between IP address and network interfaces (5G, client wifi) ref:</description>
    </item>
    
    <item>
      <title>NFS (Network FileSystem)</title>
      <link>/posts/nfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/nfs/</guid>
      <description>分享目錄的 server 安裝及設定 server 安裝:
sudo apt-get update sudo apt-get install nfs-kernel-server 設定 /etc/exports :
建議直接設定*, 在防火牆再限 ip, 不然因為 nfs port 是浮動的不好設定
/my_ugc *(rw,sync,all_squash,anonuid=1000,anongid=1000,insecure,subtree_check) /home/me/test *(ro) /my_ugc 10.170.189.142(rw,sync,all_squash,anonuid=1000,anongid=1000,insecure,subtree_check) /my_ugc 10.170.189.0/24(rw,sync,all_squash,anonuid=1000,anongid=1000,insecure,subtree_check) * : 代表任意主機 ro : 唯讀，是預設值 rw : 允許讀、寫 sync : 預設值。同步 I/O，也就是在資料異動時，會同步寫入記憶體與磁碟之中 all_squash : 所有client 端的user 都對應成 nobody(一般設定) anonuid : 為 nobody 帳號設 uid anongid : 為 nobody 帳號設 gid insecure : 允許主機不需認證即可存取 subtree_check (或 no_subtree_check, 不加上會有 error) : If a subdirectory of a filesystem is exported, but the whole filesystem isn&amp;rsquo;t then whenever a NFS request arrives, the server must check not only that the accessed file is in the appropriate filesystem (which is easy) but also that it is in the exported tree (which is harder) 更多官方文件參數說明 啟動 啟動 server</description>
    </item>
    
    <item>
      <title>Nginx</title>
      <link>/posts/nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/nginx/</guid>
      <description>Install sudo apt-get update sudo apt-get install nginx 啟動
sudo service nginx start 到 browser 看是否安裝成功 ex: http://192.168.56.1
nginx www default directory : /usr/share/nginx/html/
如果啟動 nginx 不成功/沒反應 先判斷設定檔語法是否都正確
$ sudo nginx -t nginx: the configuration file /etc/nginx/nginx.conf syntax is ok nginx: configuration file /etc/nginx/nginx.conf test is successful 查看 /var/log/nginx/error.log 是否有噴錯
2017/08/07 08:51:59 [emerg] 2032#0: bind() to 0.0.0.0:80 failed (98: Address already in use) 2017/08/07 08:51:59 [emerg] 2032#0: bind() to [::]:80 failed (98: Address already in use) 重新安裝 nginx (Ubuntu) sudo apt-get purge nginx nginx-common nginx-full sudo apt-get install nginx nginx.</description>
    </item>
    
    <item>
      <title>Node.js</title>
      <link>/posts/nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/nodejs/</guid>
      <description>Install node.js &amp;amp; npm (package manager) &amp;amp; nvm (version manager) Ubuntu sudo apt-get update sudo apt-get install nodejs nodejs-legacy sudo apt-get install npm git clone git://github.com/creationix/nvm.git ~/.nvm . ~/.nvm/nvm.sh Add path to .bashrc
echo &amp;quot;. ~/.nvm/nvm.sh&amp;quot; &amp;gt;&amp;gt; ~/.bashrc Amazon Linux (?) sudo yum install gcc-c++ make sudo yum install nodejs npm --enablerepo=epel Websocket example npm install websocket -gd test.js :
var sys = require(&amp;quot;sys&amp;quot;), my_http = require(&amp;quot;http&amp;quot;); my_http.createServer(function(request,response){ sys.puts(&amp;quot;I got kicked&amp;quot;); response.</description>
    </item>
    
    <item>
      <title>Node.js guard</title>
      <link>/posts/guard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/guard/</guid>
      <description>介紹 guard 是一個 node.js 的套件, 它可以偵測資料夾下面的檔案發生變動然候再去做相對應的事, 修改的檔案變動就 reload 瀏覽器或執行一段 shell
Install rvm 首先要先安裝 rvm, 我們再利用 rum 安裝 guard
[1] Install
sudo apt-get update sudo apt-get install curl curl -L https://get.rvm.io | bash -s stable --auto-dotfiles 如果執行失敗照著指示做 gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3, 然候再執行一次安裝指令
[2] Exec source /etc/profile.d/rvm.sh
rvm requirements [3] Install ruby
rvm install ruby rvm use ruby --default [4] Install RubyGems
rvm rubygems current 安裝 guard 及 guard-livereload guard 是偵測檔案變動你再跟它說要做什麼事</description>
    </item>
    
    <item>
      <title>Node.js gulp</title>
      <link>/posts/gulp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/gulp/</guid>
      <description>介紹 使用 node.js 的 gulp 套件可以偵測當 .scss 發生變動時可以自動 compile 並放到對應目錄
Install gulp npm install gulp npm install gulp-compass gulpfile.js :
var gulp = require(&#39;gulp&#39;); var compass = require(&#39;gulp-compass&#39;); gulp.task(&#39;default&#39;, function() { gulp.run(&#39;compass&#39;); gulp.watch([ &#39;../../sass/**&#39;, ], function(event) { gulp.run(&#39;compass&#39;); }); }); gulp.task(&#39;compass&#39;, function() { gulp.src(&#39;../../sass/**&#39;) .pipe(compass({ comments: false, css: &#39;../../../public/static/css&#39;, // css folder sass: &#39;../../sass&#39;, // scss folder })); }); 在 package.json 下執行 npm install</description>
    </item>
    
    <item>
      <title>Operating System</title>
      <link>/posts/os/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/os/</guid>
      <description>File descriptor (FD) open a file by calling system call open() that specifies access mode (read, write, or both), then the kernel returns FD number to the program Use the FD by performing I/O operations on the file such as read() or write() Close the FD by calling system call close() When the program terminates, either normally or due to an error, all open file descriptors are automatically closed by the kernel 動態庫與靜態庫 linux 下有動態庫和靜態庫.</description>
    </item>
    
    <item>
      <title>Payment Integration</title>
      <link>/posts/payments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/payments/</guid>
      <description>(最後更新 : 2016-04-28)
智付寶 介紹 智付寶有個很大的好處是提供測試環境，你可以直接去註冊，不用事先到主站註冊
這是它的測試環境註冊完後直接去開立商店，但期限只有 30 天（如果需要延長，直接寫信告知客服 cs@pay2go.com 就可以了）
接著到商店後台就會看到 API 串接金鑰了，到這裡先停，我們先做程式的部份，本篇以 Rails 實作，如果使用其他語言的朋友也沒關係，理解概念才是重點
實作導到智付寶的付款頁面 到智付寶文件專區選擇 MPG API 文件，裡面串接方法寫的很清楚，我們直接看 Code :
Controller :
# 智付寶文件規定的5個欄位必須按照字母順序 chain = &amp;quot;Amt=#{@order.total}&amp;amp;MerchantID=#{智付寶MerchantID}&amp;amp;MerchantOrderNo=#{@order.id}&amp;amp;TimeStamp=#{@order.created_at.to_i}&amp;amp;Version=#{智付寶Version}&amp;quot; # 頭先加上 HashKey，尾再加上 HashIV ，最後以 SHA-256 加密後再轉大寫 @check_value = Digest::SHA256.hexdigest(&amp;quot;HashKey=#{智付寶HashKey}&amp;amp;#{chain}&amp;amp;HashIV=#{智付寶HashIV}&amp;quot;).upcase 智付寶Merchant ID : 在支付寶後台的商店清單會顯示商店代號，不要點到你的商店裡，裡面沒有顯示 智付寶Version : 要看 API 文件的那個欄位，它會跟你說。i.e. 請帶 1.2。 智付寶HashKey : 後台的商店基本資料的API串接金鑰 智付寶HashIV : 後台的商店基本資料的API串接金鑰 HTML :
&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;https://capi.pay2go.com/MPG/mpg_gateway&amp;quot;&amp;gt; &amp;lt;!-- 此為測試的 url, 正式為 : https://api.pay2go.com/MPG/mpg_gateway --&amp;gt; &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;MerchantID&amp;quot; value=&amp;quot;&amp;lt;%= 智付寶MerchantID %&amp;gt;&amp;quot;/&amp;gt; &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;RespondType&amp;quot; value=&amp;quot;JSON&amp;quot;/&amp;gt; &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;CheckValue&amp;quot; value=&amp;quot;&amp;lt;%= @check_value %&amp;gt;&amp;quot;/&amp;gt; &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;TimeStamp&amp;quot; value=&amp;quot;&amp;lt;%= @order.</description>
    </item>
    
    <item>
      <title>PHP Basics</title>
      <link>/posts/php-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/php-basics/</guid>
      <description>升級/安裝 PHP (Ubuntu) 刪除舊版本 5.0
sudo apt-get autoremove --purge php5-* 安裝 7.0
sudo add-apt-repository ppa:ondrej/php sudo apt-get -y update sudo apt-get install php7.0 php7.0-fpm php7.0-mysql php7.0-mcrypt php7.0-curl -y 安裝完 php 的 extension (e.g. mcrypt) 會自動幫你建立 /etc/php/7.0/mods-available/mcrypt.ini 並 link 到 /etc/php/7.0/fpm/conf.d/20-mcrypt.ini
Optional:
php7.0-bz2 (壓縮) php7.0-dom (xml) php7.0-mbstring (處理編碼) 檢查語法錯誤
$ php -l test.php No syntax errors detected in test.php 啟動php shell模式
$ php -a Interactive shell php &amp;gt; echo &amp;quot;Hello World!!&amp;quot;; Hello World!</description>
    </item>
    
    <item>
      <title>PHP Codeigniter S3</title>
      <link>/posts/aws-s3-php/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/aws-s3-php/</guid>
      <description>(最後更新: 2016-04-27)
介紹 以下會介紹上傳到 s3 的 2 種方法 :
mobile 上傳到 s3 server 上傳到 s3 command 上傳到 s3, 請參考此篇 AWS-CLI command 上傳到 s3
安裝 AWS SDK 首先先用 composer 安裝 aws-sdk, composer.json :
{ &amp;quot;require&amp;quot;: { &amp;quot;aws/aws-sdk-php&amp;quot;: &amp;quot;2.7.0&amp;quot; } } 執行
$ composer install Codeigniter (application/config/config.php) 打開 : $config[&#39;composer_autoload&#39;] = TRUE;
mobile 上傳到 s3 有兩種方法
直接給手機一個 S3 的 IAM User 讓手機以 SDK 上傳圖片 S3 server 產生有 expire time 的 pre-signed URL (由 server 取得授權的 url) 給 mobile 上傳圖片 直接給手機一個 S3 的 IAM User 讓手機以 SDK 上傳圖片 原本的 Resource 的值是 *, 將它改成以下</description>
    </item>
    
    <item>
      <title>PHP Examples</title>
      <link>/posts/php-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/php-examples/</guid>
      <description>轉換容量顯示方式 (ex: 15.31GB) function reable_size($bytes) { if ($bytes == 0) { return &#39;0 MB&#39;; } $unit = array(&#39;B&#39;, &#39;KB&#39;, &#39;MB&#39;, &#39;GB&#39;, &#39;TB&#39;, &#39;PB&#39;, &#39;EB&#39;); $show_size = $bytes / pow(1024, ($i = floor(log($bytes, 1024)))); if (intval($show_size) == $show_size) { return $show_size . &#39; &#39; . $unit[$i]; } return number_format($show_size, 2) . &#39; &#39; . $unit[$i]; } IP: function get_ip() { $inspect_type = array( &amp;quot;HTTP_CLIENT_IP&amp;quot;, &amp;quot;HTTP_X_FORWARDED_FOR&amp;quot;, &amp;quot;HTTP_X_FORWARDED&amp;quot;, &amp;quot;HTTP_X_CLUSTER_CLIENT_IP&amp;quot;, &amp;quot;HTTP_FORWARDED_FOR&amp;quot;, &amp;quot;HTTP_FORWARDED&amp;quot; ); foreach ($inspect_type as $type) { if (array_key_exists($type, $_SERVER)) { $ips = explode(&amp;quot;,&amp;quot;, $_SERVER[$type]); foreach ($ips as $ip) { if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 | FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) { return $ip; } } } } return $_SERVER[&amp;quot;REMOTE_ADDR&amp;quot;]; } 產生唯一字串(共32個小寫英文及數字) echo md5(uniqid(rand(), TRUE)); 產生亂數陣列(每個數字唯一，srand指定亂數產生) php &amp;gt; $a = range(0, 29); php &amp;gt; srand(333); &amp;lt;= 隨意指定隨機數字 php &amp;gt; shuffle($a); &amp;lt;= 按照隨機數字做排序 php &amp;gt; echo print_r($a); Array ( [0] =&amp;gt; 26 [1] =&amp;gt; 21 (.</description>
    </item>
    
    <item>
      <title>PHP Frameworks</title>
      <link>/posts/php-frameworks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/php-frameworks/</guid>
      <description>Codeigniter 判斷DB是否執行成功 判斷select
if ($query-&amp;gt;result_array()) { // display data.. } return FALSE; 判斷insert
if ($this-&amp;gt;db-&amp;gt;insert_id()) { return TRUE; } 判斷update是否成功更新
if ($this-&amp;gt;db-&amp;gt;update(&#39;shares&#39;)) { return TRUE; } 或
return ($this-&amp;gt;db-&amp;gt;affected_rows() &amp;gt; 0) ? TRUE : FALSE; 判斷delete是否成功刪除
$this-&amp;gt;db-&amp;gt;delete(&#39;question_options&#39;); if ($this-&amp;gt;db-&amp;gt;affected_rows() &amp;gt; 0) { return TRUE; } return FALSE; 欄位更新 ex: +1 $this-&amp;gt;db-&amp;gt;set(&#39;lose&#39;, &#39;lose+1&#39;, FALSE); $this-&amp;gt;db-&amp;gt;where(&#39;guid&#39;, $data[&#39;guid&#39;]); $this-&amp;gt;db-&amp;gt;update(&#39;users&#39;); Form Validation 的 callback array( &#39;field&#39; =&amp;gt; &#39;current_passwd&#39;, &#39;label&#39; =&amp;gt; &#39;lang:users-current_passwd&#39;, &#39;rules&#39; =&amp;gt; &#39;trim|required|callback_check_password[13]&#39; ) function check_password($current_passwd, $uid) { // $current_passwd : CI 會自已捕捉 HTML 裡 name=&amp;quot;current_passwd&amp;quot; post 進來的值，放入第一個參數 // $uid = 13 if ( // Condition ) { return TRUE; } return FALSE; } 給 callback 的參數是從第二個參數開始給，第一個參數都是保留給自已那個欄位的值(current_passwd的值)</description>
    </item>
    
    <item>
      <title>PHP Gearman</title>
      <link>/posts/gearman/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/gearman/</guid>
      <description>介紹 Gearman 是可以在 backgroud 做事的 job worker
安裝 Gearman 可參考apple boy安裝步驟
如果一直安裝失敗可以執行以下試看看 :
sudo apt-get update sudo apt-get upgrade Persistent Storage : MySQL 預設 queue 是存在記憶體, 如果重開或 server crash, queue 就不見了, 所以我們需要一直永久存放 queue 的地方, 詳細可參考官方文件的說明
設定 /etc/default/gearman-job-server
PARAMS=&amp;quot;-q mysql --mysql-host=localhost --mysql-user=root --mysql-db=test --mysql-table=gearman_queue&amp;quot; PARAMS=&amp;quot;-q mysql &amp;ndash;mysql-host=localhost &amp;ndash;mysql-user=xxxx &amp;ndash;mysql-password=xxxxx&amp;ndash;mysql-db=gearman &amp;ndash;mysql-table=gearman_queue&amp;quot;
搭配 MySQL, 使用 test DB, 建立 gearman_queue 資料表
mysql -u root &amp;gt; use test; &amp;gt; CREATE TABLE IF NOT EXISTS `gearman_queue` ( &amp;gt; `unique_key` VARCHAR(64) DEFAULT NULL, &amp;gt; `function_name` VARCHAR(255) DEFAULT NULL, &amp;gt; `priority` INT(11) DEFAULT NULL, &amp;gt; `data` longblob, &amp;gt; `when_to_run` INT(11) DEFAULT NULL, &amp;gt; UNIQUE KEY `unique_key` (`unique_key`,`function_name`) &amp;gt; ) ENGINE=InnoDB DEFAULT CHARSET=utf8; 一定要加上 primary key ?</description>
    </item>
    
    <item>
      <title>PHP Multi-Process</title>
      <link>/posts/php-multi-process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/php-multi-process/</guid>
      <description>Example code: echo &amp;quot;Start \n&amp;quot;; $pid = pcntl_fork(); echo &amp;quot;XD \n&amp;quot;; if ($pid) { //$rtn = pcntl_waitpid($pid, $status); echo &amp;quot;father \n&amp;quot;; $sum = 0; for ($i = 0; $i &amp;lt;= 1000000; $i++) { $sum += $i; } } else { echo &amp;quot;child \n&amp;quot;; } echo &amp;quot;End \n&amp;quot;; result :
Start XD father XD child End End 註 :
用 pid 判斷是主程序還是子程序 從結果可以看出 fork 出來的子程序會從 pcntl_fork() 下一行開始執行 fork 後不會等到主程序做完才做子程序, 是分時分段執行的, 也就是多程序的概念 如果要等子程序做完主程序再做的話要在主程序裡加上 $rtn = pcntl_waitpid($pid, $status); 結果為 :</description>
    </item>
    
    <item>
      <title>PHP Testing</title>
      <link>/posts/php-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/php-testing/</guid>
      <description>Mock Mock global function and class method Notify.php
&amp;lt;?php namespace Utility; class Notify { private $obj; // Parameter was passed to use as mocked object public function __construct($mockObj = NULL) { if ($mockObj != NULL) { $this-&amp;gt;obj = $mockObj; } else { $this-&amp;gt;obj = $this; } } public function doSomething($url) { $is200 = $this-&amp;gt;obj-&amp;gt;is200OK($url); $body = file_get_contents($url); return [$is200, $body]; } public function is200OK($url) { $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true); curl_exec($ch); if (!</description>
    </item>
    
    <item>
      <title>PHP Weibo Oauth</title>
      <link>/posts/php-weibo-oauth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/php-weibo-oauth/</guid>
      <description>申請 微博申請非常的麻煩, 需要負責人的身份證件等等, 過關後才可以申請網站服務
在申請前最好先了解 &amp;ldquo;我的應用&amp;rdquo; 及 &amp;ldquo;我的網站&amp;rdquo; 的差異, 再申請適合你網站的服務
如果你的網站純粹只是要串接微博登入, 就選擇我的網站 我的應用是給如手機登入或是如 facebook app 那樣的去申請 申請我的網站 [1] 申請
在開發平台頁面 點擊 管理中心 -&amp;gt; 我的網站 -&amp;gt; 添加網站 (接下來審核的步驟可以先略過) 網站名稱可以先隨便寫，而網站域名必須為已經註冊的域名 (EX : www.example.com 以下均用此 domain 當例子) 添加網站成功後，會得到 App Key 和 App Secret ，這兩個程式裡所需要的參數 [2] 網站信息 -&amp;gt; 高級信息, 在安全設置裡面，填寫網站的域名: www.example.com 及 IP: 127.0.0.1
[3] 網站信息 -&amp;gt; 測試賬號, 設置一個管理賬號
[4] 將域名綁定到 127.0.0.1
因為在做 Oauth 回來後會導向你自己設定的 callback_url, 而這個 callback_url 的域名也是你在步驟 [1] 所申請的, 如果你沒有將這個域名在本機導向 127.0.0.1 的話, 就沒辦法完成剩下的步驟</description>
    </item>
    
    <item>
      <title>PHP yahoo oauth</title>
      <link>/posts/php-yahoo-oauth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/php-yahoo-oauth/</guid>
      <description>申請 [1] 到Yahoo! Developer Network登入後 -&amp;gt; 右上角 My Projects -&amp;gt; Create a Project
[2] 申請好會有一組 Application ID, Consumer Key, Consumer Secret
[3] 填入 domain 後記得驗證它, 才能用於線上
登入 Oauth, 並透過 yql 取得使用者資料 (使用 Codeigniter) Oauth 原先 Oauth 那邊打算使用官方的 SDK, 但是怎麼試都會有 ERROR, 於是參考網路的資源重刻了一個輪子
YQL 原以為做登入 Oauth 取得的 GUID 再透過 YQL Console 的結果網址就可以取得使用者資料, 而不透過 YQL 的 SDK
例如我想取得使用者資料 YQL Console 執行
select * from social.profile where guid = &amp;quot;{我的GUID}&amp;quot; 完成後頁面下面有 url : http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20social.profile%20where%20guid%20%3D%20%22{我的GUID}%22&amp;amp;format=json&amp;amp;diagnostics=true&amp;amp;callback=</description>
    </item>
    
    <item>
      <title>Process Manager</title>
      <link>/posts/process-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/process-manager/</guid>
      <description>Introduction If you want a program or application to run in background, process managers like supervisord, pm2, etc. can get this done for you.
Supervisor 安裝參考這裡 ubuntu 安裝指令
sudo apt-get install supervisor 唯一要注意的是 command=/usr/local/bin/long.sh command 要寫完整的指令路徑
/etc/supervisor/conf.d/aws-sqs.conf :
[program:aws-sqs] command=/home/ubuntu/mygo/bin/aws-sqs autostart=true autorestart=true stderr_logfile=/var/log/golang.err.log stdout_logfile=/var/log/golang.out.log stderr_logfile_maxbytes=10MB user=ubuntu environment=USER=&#39;test&#39;,BRAND=&#39;Company_name&#39;,HOME=/home/my_user directory=/var/www 將 supervisor 跑起來
sudo service supervisor start 對 program conf 的指令
sudo supervisorctl &amp;gt; restart worker &amp;gt; reread &amp;gt; status &amp;gt; start resque &amp;gt; tail resque // error log or sudo supervisorctl reread goworker 有時候不管怎麼 restart 及 reread 都沒有用時用 reload Error CRIT Server &#39;unix_http_server&#39; running without any HTTP authentication checking 設定 unix_http_server 帳密</description>
    </item>
    
    <item>
      <title>Rails Basics</title>
      <link>/posts/ruby-on-rails-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-basics/</guid>
      <description>Rails 指令 rails new my_app : 新增 my_app 專案 rails s : 啟動 server rails s RAILS_ENV=development : 啟動 development 環境的 server rails s -b 0.0.0.0 : 開放外部, 預設只允許本機 (127.0.0.1:3000) rvmsudo rails s -p 80 : 使用 80 port, 使用 rvmsudo 是因為 rails 起 80 port 一定要用 sudo 身份 rails s -p 5000 : 換 port, 預設是 3000 rails c : rails console, 可以直接操作 ActiveRecord rails c --sandbox : 沙盒的 console, 在這期間改的 DB 內容在離開時都會還原 rails db : 進入 db console 根據 config/database.</description>
    </item>
    
    <item>
      <title>Rails devise / cancancan / rolify</title>
      <link>/posts/ruby-on-rails-user-permissions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-user-permissions/</guid>
      <description>Introduction devise : 提供註冊, 登入, 登出一整套 solution cancancan : 授權功能, 判斷 user 是否可以做什麼, 不可以做什麼 rolify : 身份功能, 賦與 user 身份 ex: 一般 user 或 admin 等等.. cancancan 設計上跟 model 綁太緊我覺得實作上會有些綁手綁腳，而 rolify 適合用在 role 分很多的情況下使用，如果希望專案引入的東西單純一點，我建議只需要 devise 就夠了
Devise 安裝 Gemfile :
gem &amp;lsquo;bcrypt&amp;rsquo; gem &amp;lsquo;devise&amp;rsquo;, &amp;lsquo;~&amp;gt; 3.5.6&amp;rsquo;
devise 預設使用 bcrypt 做加密 Init :
rails generate devise:install rails generate devise User rails generate devise:views rake db:migrate
補上 zh-TW 旳 rails-i18n 及 devise i18n :</description>
    </item>
    
    <item>
      <title>Rails Form</title>
      <link>/posts/ruby-on-rails-form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-form/</guid>
      <description>Introduction simple_form 讓表單寫起來更乾淨, 也支援 bootstrap 樣式, 推薦這套, 它也支援 devise bootstrap_form 也是讓表單更簡單, 但預設使用的是 bootstrap 樣式 Rails 原生表單 form # method 預設是 post &amp;lt;%= form_for @post, url: posts_path(@post) do |f| %&amp;gt; &amp;lt;%= f.label :title %&amp;gt; &amp;lt;%= f.text_field :title %&amp;gt; &amp;lt;%= f.label :content %&amp;gt; &amp;lt;%= f.text_field :content %&amp;gt; &amp;lt;%= f.button :submit, disable_with: &#39;Submiting&#39; %&amp;gt; &amp;lt;% end %&amp;gt; form_for 與 form_tag 差別 使用 form_for 的話一定要在 controller 的先 new 好 (@post = Post.new)
所以要 create 必須先 new 好</description>
    </item>
    
    <item>
      <title>Rails I18n</title>
      <link>/posts/ruby-on-rails-i18n/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-i18n/</guid>
      <description>Introduction 當網站會需要多國語言顯示的話, 就會用到 i18n
使用 UI 介面方便翻譯人員協助翻譯 tolk, open source, 蠻好用的, 較直覺 lit, open source localeapp, 線上服務 Phraseapp, 線上服務 原生基本用法 config/locales/en.yml :
en: posts: &#39;Posts&#39; config/locales/zh-TW.yml :
&#39;zh-TW&#39;: posts: &#39;文章&#39; controllers/welcome_controller.rb :
before_action :set_locale def set_locale if params[:locale] &amp;amp;&amp;amp; I18n.available_locales.include?(params[:locale].to_sym) session[:locale] = params[:locale] end I18n.locale = session[:locale] || I18n.default_locale @current_lang = session[:locale].nil? ? &#39;zh-TW&#39; : session[:locale] end view :
&amp;lt;%= link_to &amp;quot;繁體中文&amp;quot;, locale: &amp;quot;zh-TW&amp;quot; %&amp;gt; &amp;lt;%= link_to &amp;quot;English&amp;quot;, locale: &amp;quot;en&amp;quot; %&amp;gt; &amp;lt;p&amp;gt;&amp;lt;%= t(&#39;posts&#39;) %&amp;gt;&amp;lt;/p&amp;gt; 對應 DB 欄位 activerecord: attributes: user: real_name: &#39;真實姓名&#39; nickname: &#39;暱稱&#39; 當 validate 失敗後的 errors.</description>
    </item>
    
    <item>
      <title>Rails Installation And Deployment</title>
      <link>/posts/ruby-on-rails-installation-and-deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-installation-and-deployment/</guid>
      <description>Installation (最後更新: 2016-04-14)
[1] Update &amp;amp; Upgrade sudo apt-get update sudo apt-get upgrade -y [2] Install RVM (Ruby Version Manager) Install curl (MacOS doesn&amp;rsquo;t need to execute this)
sudo apt-get install curl Install RVM
\curl -sSL https://get.rvm.io | bash -s stable 讀取 rvm
source ~/.rvm/scripts/rvm 安裝 rvm 自己相依的東西
rvm requirements [3] Install Ruby rvm install ruby rvm use ruby --default [4] Install RubyGems rvm rubygems current [5] Install rails gem install rails 安裝 rails 的 doc 很久, 可以加上 -no-rdoc --no-ri 忽略 doc</description>
    </item>
    
    <item>
      <title>Rails Model</title>
      <link>/posts/ruby-on-rails-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-model/</guid>
      <description>Model 與 Table 的 Naming Conventions Model : 兩個單字以上不使用 _ 連接, 並且開頭字母大寫, ex: BookClub Table : 兩個單字以上使用 _ 連接, ex: book_clubs
Model / Class Model 檔名 Table / Schema -------------------------------------------------------- Article article.rb articles LineItem line_item.rb line_items Deer deer.rb deers Mouse mouse.rb mice Person person.rb people 外連鍵命名 : item_id, order_id
CRUD Read User.find(3) User.find(3, 4, 5) User.first User.first(5) # 取前5個 User.last User.all User.count User.limit(10) User.where(name: &amp;quot;ash&amp;quot;).order(status: desc).limit(10) # complex User.where(&#39;name LIKE ?</description>
    </item>
    
    <item>
      <title>Rails Seeds</title>
      <link>/posts/ruby-on-rails-seeds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-seeds/</guid>
      <description>Introduction fabrication, 產生物件 faker, 用來建立假資料 Fabrication 一個 model 對應一個 fabrication
首先先建立模型
Fabricator(:person) do age { rand(20..45) } end 一定要用 { } 包起來，因為有遇過一些奇怪的 bug, 而 seed 不成功
Insert 資料
Fabricate(:person) Fabricate(:person, email: &#39;xxx@ff.com&#39;) # 指定欄位 Faker 使用上非常簡單, 直接看 Example 建立 4 個 users, 並且每名 user 指定一個 role, 隨機 user 建立共 50 篇文章, 隨機 user 對隨機挑的 50 篇文章回覆共 200 筆留言
user = User.create({email: &amp;quot;user@gmail.com&amp;quot;, password: &amp;quot;00000000&amp;quot;, confirmed_at: Time.now}) Fabricator(:post) do title { Faker::Lorem.</description>
    </item>
    
    <item>
      <title>Rails Testing</title>
      <link>/posts/ruby-on-rails-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-testing/</guid>
      <description>Introduction Rspec-rails, 是一套 Rails 的 BDD Testing framework, 非常強大 Factory Girl, 產生測試資料 Capybara, 用來搭配 Rspec 的測試工具, 可以模擬使用者操作瀏覽器 (TODO) watchr (存檔馬上測) / rcov(測試涵蓋度) / shoulda (matcher) Gemfile
group :development, :test do gem &amp;quot;rspec&amp;quot; # 可以不需要，如果要用原來的 rspec 才需引入 gem &#39;rspec-rails&#39; # rspec 與 rails 整合的套件 gem &amp;quot;factory_girl_rails&amp;quot; end 安裝 rspec : rails generate rspec:install
Rspec 關於 BDD BDD 是基於 TDD 發展出來的，不同 TDD 的地方在於 BDD 寫出系統行為的規格，好處是可以盡量避免細節的遺漏、更容易理解及維護。
指令 執行所有測試 : rspec 只跑 controllers 的測試 : rspec spec/controllers .</description>
    </item>
    
    <item>
      <title>Rails Third-party Gems</title>
      <link>/posts/ruby-on-rails-third-party-gems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-third-party-gems/</guid>
      <description>will_paginate 提供分頁功能
will_paginate 如何使用 controller : posts/index
@posts = Post.includes(:user) 改成 @posts = Post.includes(:user).paginate(page: params[:page], per_page: 5) view : posts/index
&amp;lt;% @posts.each do |post| %&amp;gt; &amp;lt;%= post.title %&amp;gt; &amp;lt;% end %&amp;gt; &amp;lt;%= will_paginate @posts %&amp;gt; will_paginate not working 如果傳入的是 ActiveRecord_Associations_CollectionProxy 而不是 ActiveRecord_Relation 可能會造成此狀況，在 controller 要額外引入 require &#39;will_paginate/array&#39; bootstrap 樣式 view :
&amp;lt;%= will_paginate @posts, :renderer =&amp;gt; PaginationLinkRenderer %&amp;gt; config/initializers/pagination_link_renderer.rb :
require &#39;will_paginate/view_helpers/link_renderer&#39; require &#39;will_paginate/view_helpers/action_view&#39; class PaginationLinkRenderer &amp;lt; ::WillPaginate::ActionView::LinkRenderer protected def page_number(page) unless page == current_page tag(:li, link(page, page, :rel =&amp;gt; rel_value(page))) else tag(:li, link(page, &#39;#&#39;, :rel =&amp;gt; rel_value(page)), :class =&amp;gt; &amp;quot;active disabled&amp;quot;) end end def gap tag(:li, link(&#39;.</description>
    </item>
    
    <item>
      <title>Rails View</title>
      <link>/posts/ruby-on-rails-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-on-rails-view/</guid>
      <description>(最後更新: 2016-04-27)
fields_for 一對一, 一對多 籍由 user 去更新 profile(1對1), user_languages(1對多) 欄位
user.rb
has_one :profile has_many :user_languages accepts_nested_attributes_for :profile accepts_nested_attributes_for :user_languages view
&amp;lt;%= form_for @user, url: user_path(@user), html: {method: :put} do |f| %&amp;gt; &amp;lt;%= f.fields_for :profile do |s| %&amp;gt; &amp;lt;%= s.text_field :about_me %&amp;gt; &amp;lt;% end %&amp;gt; &amp;lt;%= f.fields_for :user_languages do |l| %&amp;gt; &amp;lt;%= l.check_box :has_badge %&amp;gt; &amp;lt;%= l.object.from %&amp;gt; &amp;lt;%= l.object.to %&amp;gt; &amp;lt;% end %&amp;gt; &amp;lt;% end %&amp;gt; 產生的 HTML Name :</description>
    </item>
    
    <item>
      <title>Raspberry Pi camera</title>
      <link>/posts/raspberry-pi-camera/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/raspberry-pi-camera/</guid>
      <description>硬體規格 感測器像素 5M Pixel sensor (500 萬) 靜止拍照解析度 2592 X 1944 最大錄影解析度 1080p (720p 或 1080p 的 H.264 錄影格式 最大錄影速度 30fps 安裝 硬體參考官網影片教學將 camera 安裝到 Rpi 上
安裝 camera sudo apt-get update sudo apt-get upgrade sudo raspi-config 選擇 Enable Camera -&amp;gt; enable 結束 config 時會問你要不要重開機, 選擇要
指令介紹 raspistill 拍照儲存成jpeg raspistill -o image.jpg -o : Output filename
輸入完後原本 terminal 的黑畫面會有一層 camera 的影像佔滿螢幕高度
過了大約 5 秒就會拍下來了, 檔案大小大約 2.4 M
raspivid 錄影 5 秒編碼為 h.</description>
    </item>
    
    <item>
      <title>Raspberry Pi camera MJPG-streamer server</title>
      <link>/posts/raspberry-pi-camera-mjpg-streamer-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/raspberry-pi-camera-mjpg-streamer-server/</guid>
      <description>MJPG-streamer 是一個能截取 camera 影像的套件, 將每幅影像壓成 jpg, 並且起一個 server 將影像輸出, 好處是跨瀏覽器、編解碼容易、運算能力需求低, 缺點是即時性差(在高解析的影像更是明顯)
安裝 MJPG-streamer 安裝必要的相依套件 sudo apt-get install subversion libjpeg8-dev imagemagick libv4l-dev 下載並安裝 MJPG-streamer cd ~ svn co https://svn.code.sf.net/p/mjpg-streamer/code/ cd mjpg-streamer/mjpg-streamer make sudo make install svn 點斷了可到官方下載 最後一行安裝指令會將一些檔案搬到以下路徑 mjpg_streamer : /usr/local/bin input_uvc.so output_file.so output_udp.so input_testpicture.so input_file.so : /usr/local/lib www/* : /usr/local/www Starting the Webcam Server cd ~/mjpg-streamer/mjpg-streamer ./mjpg_streamer -i &amp;quot;./input_uvc.so -r 320x240 -f 1&amp;quot; -o &amp;quot;./output_http.so -w ./www&amp;quot; 320x240, fps:1
Watch the stream in your browser 你可以在同一個 lan 的電腦打開瀏覽器輸入你的 ip:8080 (i.</description>
    </item>
    
    <item>
      <title>Raspberry Pi camera RTSP</title>
      <link>/posts/raspberry-pi-camera-rtsp-video-streaming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/raspberry-pi-camera-rtsp-video-streaming/</guid>
      <description>什麼是 RTP/RTCP/RTSP/RTMP RTP (Real-time Transport Protocol) 是一種傳遞音訊和視訊的協定, 主要應用在 UDP 上, 大多用在一對一傳播 RTCP (Real-time Transport Control Protocol) 為 RTP 提供 out-of-band 控制, 本身不傳輸數據, 但和RTP一起協作將 media data 打包和發送 RTSP (Real Time Streaming Protocol) 控制聲音及影像的多媒體串流協定, 運作跟 HTTP/1.1 類似, 支援 Multicast, 不強調時間同步等特性, 通常處理 RTP 及 RTCP 協定使用, 可選擇 TCP 或 UDP 傳送 RTMP (Real Time Messaging Protocol) 是 Adobe Flash 的多媒體串流協定 RTMP vs RTSP 做的事情基本是一樣的, rtsp 是公開的 protocal, rtmp 是 adobe 的 protocal rtsp on web: Realplayer / Quicktime player / VLC player rtmp on web: flash (目前直播 live 幾乎都走 rtmp) youtube 是 vp8 (一種 codec 格式) camera 幾乎都是走 h.</description>
    </item>
    
    <item>
      <title>Raspberry pi uses 3.5G</title>
      <link>/posts/raspberry-pi-3g/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/raspberry-pi-3g/</guid>
      <description>介紹 RPI 本身如果要上網就只能連附近的 wifi 熱點, 這樣就會有地域上的限制,
想要脫離此限制, 可以使用 3.5G 無線網卡來上網,
這樣一來不但可以解決網路問題, 也能做出更好玩的應用,
想想如果可以將 RPI + camera + arduino + 無線網卡結合,
最基本就可以做到超遠端控制了, e.g. 具備即時影像的遠端搖控車
首先需要一個 RPI 支援的無線網卡, 需要注意的是並不是每家無線網卡 RPI 都支援,
看到蠻多的成功案例是華為 E173, 所以我也買此款,
如果要買其他廠牌型號的網卡建議先去 google 看看是否有人成功
檢查一下硬體有沒有讀到 lsusb Bus 001 Device 002: ID 0424:9512 Standard Microsystems Corp. Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. Bus 001 Device 004: ID 12d1:1446 Huawei Technologies Co.</description>
    </item>
    
    <item>
      <title>Raspberry Pi with ffmpeg</title>
      <link>/posts/raspberry-pi-ffmpeg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/raspberry-pi-ffmpeg/</guid>
      <description>rpi camera 只支援輸出 raw h.264 雖然 chrome 跟 safari （firefox 不援, 而 safari 因為是 call 自己的 quicktime 去播放影片所以支援的又更廣) 都支援解碼 h.264 codec 但不支援解 raw h.264
但可以解 container 一定要是 mp4, 所以輸出 h.264 還需要經過一層轉檔成 mp4 才能在瀏覽器上看到
install ffmpeg sudo apt-add-repository ppa:jon-severinsson/ffmpeg sudo apt-get update sudo apt-get install ffmpeg convert raw h264 to mp4 ffmpeg -r 30 -i test2.h264 -vcodec copy test2.mp4 ffserver /etc/ffserver.conf 加上
&amp;lt;Stream live.mp4&amp;gt; Format mp4 Feed feed1.ffm VideoCodec libx264 VideoFrameRate 30 VideoSize 320x240 NoAudio &amp;lt;/Stream&amp;gt; 啟動 ffserver : ffserver -f /etc/ffserver.</description>
    </item>
    
    <item>
      <title>Raspberry Pi, Installation, XBMC, Samba</title>
      <link>/posts/raspberry-pi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/raspberry-pi/</guid>
      <description>介紹 Raspberry Pi 是一台小型的電腦, 幾乎一般 linux 電腦能做到的事它也都能做到, 而它最大的優勢就是體型非常的小, 小到你可以方便攜帶, 而功能一點也不陽春, 非常適合拿它來作媒體中心或小型的運算。
如果還沒有 Raspberry Pi(以下簡稱 rpi) 不知道哪些要買的可以參考本文末的推薦清單
安裝 OS(作業系統) [下載 OS 映像檔] 下載 Raspberry Pi 的 OS 選擇 Raspbian 版本是 wheezy
下載完後解壓縮出來是一個 2013-09-25-wheezy-raspbian.img 檔
[將 Raspbian OS 燒錄到 SD 卡] 不同的作業系統要用不同的方式燒到 SD 卡, 先將 SD 卡插入到電腦
如果是 Windows 下載 Win32 Disk Imager, 解壓縮完是一個資料夾, 執行 Win32DiskImager, Image File 選擇 2013-09-25-wheezy-raspbian.img
Device 選擇 SD 卡, 按 write, 就會進行燒錄了
[安裝 Raspbian] 將燒錄好的 SD 卡插入 Raspberry pi, 並且將電源線插上插座, 鍵盤接上, HDMI線接上電視或電腦螢幕,</description>
    </item>
    
    <item>
      <title>Regular Expression</title>
      <link>/posts/regular-expression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/regular-expression/</guid>
      <description>需要被脫逸的符號 : \ : 可以脫逸字元 [ ] : [xyz] 比對中括孤內的任一個字元 , 但不會將配對到的字串存入RegExp變數中 ( ) : 合起來 (x) 比對x並將符合的部份存入一個變數, /(a*) and (b*)/ 可以對 ‘aaa and bb’ 中的’aaa’和’bb’, 並將這兩個比對得到的字串設定至數字 RegExp.$1 和 RegExp.$2 . : 比對任何一個字元 , 但換行符號不算 ^ : 啟始位置 $ : 結束位置 * : 比對前一個字元 , 零次或更多次 , 等於{0,} ? : 比對前一個字元 , 零次或一次 , 等於{0,1} + : 比對前一個字元 , 一次或更多次 , 也等於 {1,} | : 或者 , 等於OR , 邏輯運算子(Logical Operators) 左中括號([)需脫逸 , 但右中括號(])不需脫逸 , 左下到右上的斜線(/)也需要脫逸</description>
    </item>
    
    <item>
      <title>Ruby Basics</title>
      <link>/posts/ruby-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-basics/</guid>
      <description>變數 以此例為例子
class Var def print puts $hh end $hh = &amp;quot;hh&amp;quot; end t = Var.new t.print 替換以下變數
$name : 全域變數. 結果: 正常 @name : 實例變數, 作用僅限於 self 指示的物件. 結果: 相當於輸出 nil, 什麼東沒有 @@name : 類別變數, 在 class 內使用, 如果另個物件繼承它的物件, 也可以使用 @@name. 結果: 正常 name : 區域變數 (小寫字母或底線開頭, 初始化前並沒有 nil 值). 結果: undefined local variable or method hh&#39; Name : 常數 (大寫開頭, 不可重覆定義). 結果: 正常 結論 : 定義在 class 內的變數必須是 全域, 類別或常數</description>
    </item>
    
    <item>
      <title>Ruby Gem</title>
      <link>/posts/ruby-gem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ruby-gem/</guid>
      <description>Install Gem on Ubuntu [1] Update &amp;amp; Upgrade sudo apt-get update sudo apt-get upgrade -y [2] Install RVM (Ruby Version Manager) Install curl (MacOS doesn&amp;rsquo;t need to execute this)
sudo apt-get install curl Install RVM
\curl -sSL https://get.rvm.io | bash -s stable 讀取 rvm
source ~/.rvm/scripts/rvm 安裝 rvm 自己相依的東西
rvm requirements [3] Install Ruby rvm install ruby rvm use ruby --default [4] Install RubyGems rvm rubygems current Gem commands gem -v : RubyGems 版本 gem update --system : 升級 RubyGems gem install gem_name : 安裝某個套件, 加上 --no-ri --no-rdoc 不產生文件 gem list : 列出安裝的套件 gem update gem_name : 更新最新版本 gem update : 更新所有 Gem gem install -v x.</description>
    </item>
    
    <item>
      <title>Samba</title>
      <link>/posts/samba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/samba/</guid>
      <description>安裝 sudo apt-get install samba 關閉 $ sudo service smbd stop smbd stop/waiting 開啟 $ sudo service smbd start smbd start/running, process 15892 重新啟動 $ sudo service smbd restart smbd stop/waiting smbd start/running, process 7782 查看目前狀態 $ sudo service smbd status smbd start/running, process 9395 設定 /etc/samba/smb.conf : (append到最下面) [share] &amp;lt;= 這個samba位置的名字, 變更時URL也會變 path = /home/test/share &amp;lt;= 自已指定放置網芳的位置 public = yes writable = yes printable = no #only guest = yes #guest ok = yes 連線 windows連進samba輸入\\{IP/Domain name}\share :</description>
    </item>
    
    <item>
      <title>SSH</title>
      <link>/posts/ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ssh/</guid>
      <description>產生 ssh key 並且設定免密碼直接連入遠端主機 本機:
cd ~ ssh-keygen -t rsa (enter到底) cd .ssh scp id_rsa.pub 遠端主機網址:~/.ssh/qq (把本機的公鑰複製到遠端主機) 登入遠端主機:
ssh 遠端主機網址 (會要你輸入密碼) cd .ssh cat qq &amp;gt;&amp;gt; authorized_keys (將主機的公鑰加入到遠端的驗證key裡) rm qq (加入到authorized_keys後就沒有用了, 刪除它) exit (大功告成, 離開遠端主機) 回本機:
ssh 遠端主機網址 (不會要求你輸入密碼而直接進入) 安全性設定 Open /etc/ssh/sshd_config (Please note, it&amp;rsquo;s sshd_config as opposed to ssh_config) :
允許密碼驗證 PasswordAuthentication yes 改 SSH default port Port 2222 Protocol 2 PermitRootLogin no 1025~65536 的 port 都可以使用 PermitRootLogin 設為 no 的話, root 登入還是會要求你輸入密碼, 只是即使輸入的是對的密碼, 也會告訴你是錯的, 即不讓你登入就對了 只允許某個 User UseDNS no AllowUsers test Reload 新設定 別急著登出, 先測試修改是否成功</description>
    </item>
    
    <item>
      <title>swftools</title>
      <link>/posts/swftools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/swftools/</guid>
      <description>Installation libfreetype6
apt-get install libfreetype6 libgif-dev
apt-get install libgif-dev libjpeg-dev
apt-get install libjpeg-dev apt-get upgrade --show-upgraded zlib1g-dev、freetype
sudo apt-get install zlib1g-dev sudo apt-get install freetype* 安裝swftools
需先安裝
sudo apt-get install make sudo apt-get install g++ 取得最新版並安裝:
cd /tmp wget http://www.swftools.org/swftools-2013-04-09-1007.tar.gz tar -xvf swftools-2013-04-09-1007.tar.gz cd swftools-2013-04-09-1007 ./configure sudo make sudo make install Jodconverter 將word等..轉成pdf libreoffice
sudo apt-get install libreoffice fonts dir : /usr/lib/libreoffice/share/fonts/truetype
install font:
cd /tmp wget http://downloads.sourceforge.net/project/wqy/wqy-microhei/0.2.0-beta/wqy-microhei-0.2.0-beta.tar.gz tar zxvf wqy-microhei-0.</description>
    </item>
    
    <item>
      <title>System Design</title>
      <link>/posts/system-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/system-design/</guid>
      <description>How can you generate a key that is guaranteed to be unique? The possibility to get duplicates by UUIDv4 UUIDv4 generates a random id using random numbers, with 122 random bits. The chances of generating a duplicate are extremely low but not zero.
To understand the probability, consider that the number of version 4 UUIDs which can be generated is 2^122 or about 5.3x10^36.
To put these numbers into perspective, the annual risk of a given person being hit by a meteorite is estimated to be one chance in 17 billion , which means the probability is about 0.</description>
    </item>
    
    <item>
      <title>Ubuntu</title>
      <link>/posts/ubuntu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/ubuntu/</guid>
      <description>查 ubuntu 版本 $ lsb_release -a No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 13.10 Release: 13.10 Codename: saucy 升級 Linux kernel 查看目前版本
確切版號 $ uname -r 4.8.3-x86_64-linode76 $ uname -a Linux 139-162-12-42 4.8.3-x86_64-linode76 #1 SMP Thu Oct 20 19:05:39 EDT 2016 x86_64 x86_64 x86_64 GNU/Linux 尋找要的 Kernel image
sudo apt-get update sudo apt-cache search linux-image linux-image-3.19.0-15-generic - Linux kernel image for version 3.19.0 on 64 bit x86 SMP linux-image-3.</description>
    </item>
    
    <item>
      <title>VirtualBox</title>
      <link>/posts/virtualbox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/virtualbox/</guid>
      <description>讓本機的 putty 可以用 ssh 連進 VirtualBox 的主機裡 開啟你的 windows 命令列輸入 ipconfig ，乙太網路卡 VirtualBox Host-Only Network: 的 IPv4 位址 那欄，假設是192.168.0.100，先記下來
開啟你的 linux terminal 輸入 ifconfig ，找到 inet addr，假設是10.0.3.11，先記下來
開啟VitualBox左上角機器設定值→網路→連接埠傳送
將你記下來的 IP 填上去。(主機IP是填windows IP，客體IP是填VirtualBox裡的Ubuntu IP)
協定 : TCP 主機IP : 192.168.0.100 主機連接埠 : 22 客體IP : 10.0.3.11 客體連接埠 : 22 接下來打開 putty 連到 virtualBox
Host Name (or IP address) 輸入 :192.168.0.100 (putty:要連的是主機ip)
Port : 22
本機瀏覽器顯示 VirtualBox 裡 http server 結果 開啟VitualBox左上角機器設定值→網路→連接埠傳送</description>
    </item>
    
    <item>
      <title>WeChat Oauth</title>
      <link>/posts/weixin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/weixin/</guid>
      <description>微信登入 必須先備案, 備案後去申請微信網站應用時還需要附一些公司名稱, 負責人, 章, 備案號等&amp;hellip;
列印填完後掃描再上傳 word 審核
微信公眾號 先請代辦幫忙申請公眾號或服務號
公眾號一天只能發一封, 但是是被收在訂閱帳號裡的
服務號一個月只能發4封, 但是是獨立的聊天訊息, 曝光率較高
代辦只會幫你申請, 不含認證, 認證才能用到一些進階的功能, 例如取得服務號裡的獲取用戶基本訊息, 獲取關注者列表等..
&amp;mdash; 申請成功, 未認證成功只能用簡單功能, 例如 接發訊息到公眾號裡 &amp;mdash;
後台開發者中心會要求填寫 URL + Token, 然候 server 可以用別人寫好的 SDK
做驗證。驗證成功後會給 AppID + AppSecret 就可以利用這兩個 Key 使用高級 API 功能了 (獲取關注者列表)
註 :
PHP SDK 可參考 : http://www.cnblogs.com/xingmeng/p/3706676.html
&amp;ldquo;接收用戶消息&amp;rdquo; API 之後用戶留言在公眾號/服務號也都會 call 你提交出去的 URL, 也都會帶驗證的 $_GET 進來,
也就是每一次 POST 進來的值都要 check signature, 然候再處理你收到的訊息
註 :
用戶訊息不會在 GET 或 POST 裡, 必須要用 $GLOBALS[&amp;quot;HTTP_RAW_POST_DATA&amp;quot;] 接,</description>
    </item>
    
    <item>
      <title>Windows</title>
      <link>/posts/windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/windows/</guid>
      <description>修改 win8 host (C:\Windows\System32\Drivers\etc) [1] 修改編輯權限
選擇 hosts 右鍵-&amp;gt;內容-&amp;gt;安全性-&amp;gt;點擊&amp;quot;群組或使用者名稱&amp;quot;下面的編輯-&amp;gt;修改 ALL APPLICATION PACKAGES 權限-&amp;gt;將&amp;quot;修改&amp;quot;勾選允許
[2] notepad++ 以系統管理員執行身份
C:\Program Files (x86)\Notepad++\notepad++.exe 右鍵-&amp;gt;以系統管理員身份執行
[3] 就可以在 hosts 加入要對應的 ip 跟 domain
發生 &#39;ping&#39; 不是內部或外部命令、可執行的程式或批次檔。 發生原因 : C:\Windows\system32 放一些如 ping.exe, 所以當 PATH 路徑未指到 C:\Windows\system32
解決方法1 :
cd C:\Windows\system32 ping www.google.com.tw 解決方法2 :
將 PATH 全域變數指向 %SystemRoot%\system32;%SystemRoot%
如果 PATH 本身已有設定值, 以 ; 分隔 %systemRoot% 是 C:\Windows .bat 語法 pause : 暫停, 當指令執行完不要直接關閉視窗 清除 dns cache ipconfig /flushdns 清除瀏覽器指令 : chrome : chrome://net-internals/#dns firefox : about:config -&amp;gt; network.</description>
    </item>
    
    <item>
      <title>Windows - Install the gcc compiler MinGW</title>
      <link>/posts/windows-install-gcc-compiler-mingw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/windows-install-gcc-compiler-mingw/</guid>
      <description>MinGW 介紹 MinGW 全稱 Minimalist GNU For Windows，是個精簡的Windows平台C/C++、ADA及Fortran編譯器，相比Cygwin而言，體積要小很多，使用較為方便。MinGW提供了一套完整的開源編譯工具集，以適合Windows平台應用開發，且不依賴任何第三方C運行時庫。
MinGW包括： 一套集成編譯器，包括C、C++、ADA語言和Fortran語言編譯器 用於生成Windows二進製文件的GNU工具的（編譯器、鏈接器和檔案管理器） 用於Windows平台安裝和部署MinGW和MSYS的命令行安裝器（mingw-get） 用於命令行安裝器的GUI打包器（mingw-get-inst） 下載 MinGW 到 mingw 下載頁面 上面應該有可以直接下載最新版的連結
Looking for the latest version? Download mingw-get-setup.exe (86.5 kB)
安裝套件 - C/C++ 編譯器 安裝完後會跳出一個視窗讓你選擇你要安裝的套件,
在 mingw32-gcc-g++ 上按右鍵選擇 Mark for Installation 把它勾選起來
然候左上角 Installation 選擇 Apply Change 就會開始安裝 C/C++ 編譯器了,
設定系統環變數 安裝完後要將 GCC 的路徑 C:\MinGW\bin 加到系統環境變數 PATH, 才能使用,
我的電腦右鍵 -&amp;gt; 內容 -&amp;gt; 進階系統設定 -&amp;gt; 進階TAB, 點選在下面的環境變數 -&amp;gt; 在下面的系統變數那新增
變數名稱 : PATH 變數值 : %SystemRoot%\system32;%SystemRoot%;C:\MinGW\bin</description>
    </item>
    
    <item>
      <title>Wireless Network</title>
      <link>/posts/wireless-network-setting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/wireless-network-setting/</guid>
      <description>安裝 wpa client sudo apt-get install wireless-tools wpasupplicant 掃描無線網路 sudo iwlist wlan0 scan | grep SSID ESSID:&amp;quot;hinet-net4690695&amp;quot; ESSID:&amp;quot;BUFFALO-E05EE0&amp;quot; ESSID:&amp;quot;BUFFALO-E05EE0-1&amp;quot; ESSID:&amp;quot;kking22&amp;quot; ESSID:&amp;quot;TP-LINK_5499B2&amp;quot; ESSID:&amp;quot;HTC ONE X - test&amp;quot; ESSID:&amp;quot;P880&amp;quot; 等等要將 SSID 填入 /etc/network/interfaces wpa-ssid 的值
新增 /etc/network/interfaces : auto lo iface lo inet loopback auto eth0 iface eth0 inet dhcp auto wlan0 allow-hotplug wlan0 iface wlan0 inet dhcp wpa-ssid My-Hone-Wireless wpa-psk My-Password SSID 就是無線網路的名稱 WPA-PSK金鑰 就是無線網路的密碼 重新啟動無線網路介面 sudo ifdown wlan0 sudo ifup wlan0 成功連線的結果 :</description>
    </item>
    
  </channel>
</rss>
